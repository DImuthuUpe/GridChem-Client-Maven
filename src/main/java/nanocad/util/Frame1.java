package nanocad.util;

/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;
import java.io.*;
import java.util.*;

import nanocad.newNanocad;

public class Frame1 extends Frame
{
	public newDialog pDialog;
	public atomProperty currentProperty;
	public AtomTypeFile aFile= new AtomTypeFile();
	public Vector bipVector = new Vector();
	public Vector pVector = new Vector();
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.TextField textField1;
	java.awt.Label label1;
	java.awt.Label label2;
	java.awt.TextField aNumberField;
	java.awt.Label label3;
	java.awt.Checkbox checkbox1;
	java.awt.Button button1;
	java.awt.Button button2;
	java.awt.List pdlist;
	java.awt.Button button3;
	java.awt.Label label4;
	java.awt.Button database_add;
	java.awt.List biplist;
	//}}

	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar;
	java.awt.Menu menu1;
	java.awt.MenuItem miOpen;
	java.awt.MenuItem miSaveAs;
	java.awt.MenuItem miExit;
	java.awt.Menu menu2;
	java.awt.MenuItem menuItem1;
	java.awt.MenuItem menuItem2;
	java.awt.MenuItem menuItem3;
	java.awt.Menu menu3;
	java.awt.MenuItem miAbout;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == Frame1.this)
				Frame1_WindowClosing(event);
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == miOpen)
				miOpen_Action(event);
			if (object == miReorder)
				miReorder_Action(event);
			else if (object == miAbout)
				miAbout_Action(event);
			else if (object == miExit)
				miExit_Action(event);
			else if (object == menuItem3)
			    removeProperty_Action(event );
			else if (object == biplist)
			    biplist_Action();
			else if (object == button3)
				button3_Action(event);
			else if (object == button2)
			    addUserDef_Action();
			else if (object == button1)
				button1_Action(event);
			else if (object == database_add)
				database_add_Action(event);
			else if (object == menuItem1)
				menuItem1_Action(event);
			else if (object == miSaveAs)
				miSaveAs_Action(event);
			else if (object == menuItem2)
				menuItem2_Action(event);
		}
	}
	
	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == checkbox1)
				checkbox1_ItemStateChanged(event);
		}
	}

	class SymText implements java.awt.event.TextListener
	{
		public void textValueChanged(java.awt.event.TextEvent event)
		{
			Object object = event.getSource();
			if (object == aNumberField)
				aNumberField_TextValueChanged(event);
			else if (object == textField1)
				textField1_TextValueChanged(event);
		}
	}

	protected final static java.lang.String propertySeperator = ">>";
	protected int currentPropertyIndex = -1;
	protected java.awt.MenuItem miReorder;
	public Frame1()
	{
		//begin data readin
		aFile.readFileFromData("aData2.dat");
		currentProperty = new atomProperty();
		try 
		{

	    	BufferedReader in = new BufferedReader(new FileReader(newNanocad.txtDir + 
	    			newNanocad.fileSeparator + "bip.txt"));
//			//BufferedReader in = new BufferedReader(new FileReader("bip.txt"));
			while(in.ready())
			{   
	    	    bipVector.addElement((Object) in.readLine());
		    }
			in.close();
			
			in = new BufferedReader(new FileReader(newNanocad.txtDir + 
	    			newNanocad.fileSeparator + "p.txt"));
			//in = new BufferedReader(new FileReader("p.txt"));
		    while(in.ready())
			{   
	    	    pVector.addElement((Object) in.readLine());
		    }
			in.close();

		}
		catch(IOException e)
		{
		    System.err.println("ptable data read exception");
		}
		
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(insets().left + insets().right + 707,insets().top + insets().bottom + 407);
		textField1 = new java.awt.TextField();
		textField1.setBounds(insets().left + 24,insets().top + 48,372,36);
		add(textField1);
		label1 = new java.awt.Label("Property Name");
		label1.setBounds(insets().left + 24,insets().top + 24,132,24);
		add(label1);
		label2 = new java.awt.Label("Associated Atomic Number");
		label2.setBounds(insets().left + 24,insets().top + 96,156,22);
		add(label2);
		aNumberField = new java.awt.TextField();
		aNumberField.setBounds(insets().left + 24,insets().top + 120,156,36);
		add(aNumberField);
		label3 = new java.awt.Label("Built in Properties");
		label3.setBounds(insets().left + 408,insets().top + 24,108,18);
		add(label3);
		checkbox1 = new java.awt.Checkbox("Temporary");
		checkbox1.setBounds(insets().left + 240,insets().top + 132,84,22);
		add(checkbox1);
		button1 = new java.awt.Button();
		button1.setLabel("<< Add Built In");
		button1.setBounds(insets().left + 264,insets().top + 252,132,25);
		button1.setBackground(new Color(12632256));
		add(button1);
		button2 = new java.awt.Button();
		button2.setLabel("<< Add User Defined");
		button2.setBounds(insets().left + 264,insets().top + 288,132,26);
		button2.setBackground(new Color(12632256));
		add(button2);
		pdlist = new java.awt.List(0,false);
		add(pdlist);
		pdlist.setBounds(insets().left + 24,insets().top + 192,229,160);
		button3 = new java.awt.Button();
		button3.setLabel("Remove");
		button3.setBounds(insets().left + 264,insets().top + 324,132,27);
		button3.setBackground(new Color(12632256));
		add(button3);
		label4 = new java.awt.Label("Property Definition");
		label4.setBounds(insets().left + 24,insets().top + 168,108,19);
		add(label4);
		database_add = new java.awt.Button();
		database_add.setLabel("Add to Database");
		database_add.setBounds(insets().left + 24,insets().top + 360,374,23);
		database_add.setBackground(new Color(12632256));
		add(database_add);
		biplist = new java.awt.List(0,false);
		add(biplist);
		biplist.setBounds(insets().left + 408,insets().top + 48,276,336);
		setTitle("Atom Property Definition");
		//}}

		//add built in properties to the list box
		for (int i = 0 ; i < bipVector.size(); i++)
			biplist.add((String) bipVector.elementAt(i));
		add(biplist);
		
		//add user-defined properties to the property dialog
		pDialog = new newDialog(this);
		for (int i = 0; i < pVector.size(); i++)
			pDialog.addItem((String) pVector.elementAt(i));

		//{{INIT_MENUS
		mainMenuBar = new java.awt.MenuBar();
		menu1 = new java.awt.Menu("File");
		miOpen = new java.awt.MenuItem("Edit Property");
		menu1.add(miOpen);
		miReorder = new java.awt.MenuItem("Reorder properties");
		menu1.add(miReorder);
		miSaveAs = new java.awt.MenuItem("Save Database");
		menu1.add(miSaveAs);
		menu1.addSeparator();
		miExit = new java.awt.MenuItem("Exit");
		menu1.add(miExit);
		mainMenuBar.add(menu1);
		menu2 = new java.awt.Menu("Property");
		menuItem1 = new java.awt.MenuItem("New Property");
		menu2.add(menuItem1);
		menuItem2 = new java.awt.MenuItem("Commit Property");
		menu2.add(menuItem2);
		menuItem3 = new java.awt.MenuItem("Remove Property");
		menu2.add(menuItem3);
		mainMenuBar.add(menu2);
		menu3 = new java.awt.Menu("Help");
		mainMenuBar.setHelpMenu(menu3);
		miAbout = new java.awt.MenuItem("About..");
		menu3.add(miAbout);
		mainMenuBar.add(menu3);
		setMenuBar(mainMenuBar);
		//$$ mainMenuBar.move(156,24);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		miOpen.addActionListener(lSymAction);
		miReorder.addActionListener(lSymAction);
		miAbout.addActionListener(lSymAction);
		miExit.addActionListener(lSymAction);
		menuItem3.addActionListener(lSymAction);
		button3.addActionListener(lSymAction);
		button2.addActionListener(lSymAction);
		button1.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		checkbox1.addItemListener(lSymItem);
		SymText lSymText = new SymText();
		aNumberField.addTextListener(lSymText);
		textField1.addTextListener(lSymText);
		database_add.addActionListener(lSymAction);
		menuItem1.addActionListener(lSymAction);
		miSaveAs.addActionListener(lSymAction);
		menuItem2.addActionListener(lSymAction);
		//}}
		biplist.addActionListener(lSymAction);
	}
	public Frame1(String title)
	{
		this();
		setTitle(title);
	}
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
/**
 * Insert the method's description here.
 * Creation date: (6/20/00 10:04:15 AM)
 * @param v java.util.Vector
 */
protected void addPropertiesToList(atomProperty propertyToView)
{
	addPropertiesToList(propertyToView, "");	
}
/**
 * Insert the method's description here.
 * Creation date: (6/20/00 10:04:15 AM)
 * @param v java.util.Vector
 */
protected void addPropertiesToList(atomProperty propertyToList, String prefix) {
	String propertyName;
	for (int i = 0; i < propertyToList.numberOfProperties(); i++) {
		propertyName = biplist.getItem(propertyToList.getPropertyType(i));
		if (propertyName.endsWith("I"))
			propertyName = propertyName + ": " + propertyToList.getParameterAsInt(i);
		pdlist.add(prefix + i + " " + propertyName);
		if (propertyName.endsWith("P"))
			addPropertiesToList(propertyToList.getParameterAsProperty(i), prefix + i + " "  + propertyName + propertySeperator);

	}
}
	void addUserDef_Action()
	{
	pDialog.openForSelect();
	int selectedIndex = pDialog.getSelectedIndex();
	if (pDialog.dialogWasCancelled())
		return;
	atomProperty p = aFile.getProperty(selectedIndex);
	p = getSelectedSubPropertyOwner();
	p.addProperty(p);
	replaceSelectedSubPropertyOwnerWith(p);
	refreshPropertyDefinitionList();
	}
	void aNumberField_TextValueChanged(java.awt.event.TextEvent event)
	{
	    int val;
		try
		{
			if (aNumberField.getText().equals(""))
				val = 255;
			else
				val = Integer.parseInt(aNumberField.getText());
		}
		catch(Exception e)
		{
			val = 256;
		}
		if (val > 255) //negative numbers not possible - "-" not a vaild integer
		{
			aNumberField.setText("255");
			currentProperty.setANumber(255);
			return;
		}
		currentProperty.setANumber(val);        
	}
	void biplist_Action()
	{
	 	atomProperty newProperty = getSelectedSubPropertyOwner();   
		String param = new String("");
		String s = new String(biplist.getSelectedItem());
		int index = s.indexOf(" ");
		if( index > 0)
		{
	    if(s.substring(index,s.length()).indexOf("F") >= 0)
	    {
  
					paramDialog p = new paramDialog(this, true);
					p.show();
					param = p.textField1.getText();
				
					try
					{
						
						float fParam = Float.valueOf(param).floatValue();
						newProperty.addProperty((byte)biplist.getSelectedIndex(), fParam);
					}
					catch (NumberFormatException e)
					{
						biplist_Action(); //let the user try to enter the data again
						return;
					}

	    }
			if(s.substring(index,s.length()).indexOf("P") >= 0)
			{

				pDialog.openForSelect();
				param = pDialog.getItem(pDialog.getSelectedIndex());
				if (param == null) return;
				newProperty.addProperty((byte)biplist.getSelectedIndex(),aFile.getProperty(pDialog.getSelectedIndex()));
			}
			else
			{
				if(s.substring(index,s.length()).indexOf("I") >= 0)
				{   
					paramDialog p = new paramDialog(this, true);
					p.show();
					param = p.textField1.getText();
				
					try
					{
						
						int iParam = Integer.parseInt(param);
						newProperty.addProperty((byte)biplist.getSelectedIndex(), iParam);
					}
					catch (NumberFormatException e)
					{
						biplist_Action(); //let the user try to enter the data again
						return;
					}
					
				}//end if(s.substring(index,s.length()).indexOf("I") >= 0)
			}//end else
		}//end if (index > 0)
		else //occurs if there are not parameters
		{
			newProperty.addProperty((byte)biplist.getSelectedIndex());
		}
		replaceSelectedSubPropertyOwnerWith(newProperty);
		refreshPropertyDefinitionList();
	    return;
	}
	void button1_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Add a string to the List... Get the current item text
		biplist_Action();
		//}}
	}
	//remove property
	void button3_Action(java.awt.event.ActionEvent event)
	{
		atomProperty owner = getSelectedSubPropertyOwner();
		int index = getSelectedIndexInOwner();
		if (index == -1) return;
		owner.removeProperty(index);
		replaceSelectedSubPropertyOwnerWith(owner);
		refreshPropertyDefinitionList();
	}
	void checkbox1_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Disable the TextField on condition... Is Checkbox On?
		aNumberField.setText("255");
		aNumberField.setEnabled(! checkbox1.getState());
		//}}
		if(!checkbox1.getState())
		{
			currentProperty.setANumber(255);
		}
	}
	void database_add_Action(java.awt.event.ActionEvent event)
	{
		if(currentPropertyIndex == -1)
		{
	    	aFile.addProperty(currentProperty);
		    pDialog.addItem(currentProperty.getANumber() +" "+textField1.getText());
		}
		else
			aFile.replaceProperty(currentPropertyIndex, currentProperty);
	    //clear all values
	    menuItem1_Action(event);
			 
	}
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		hide();		 // hide the Frame
		dispose();	  // free the system resources
		System.exit(0); // close the application
	}
/**
 * Insert the method's description here.
 * Creation date: (6/23/00 1:40:52 PM)
 * @return nanocad.util.AtomTypeFile
 */
public AtomTypeFile getFile() {
	return aFile;
}
/**
 * Insert the method's description here.
 * Creation date: (6/22/00 4:38:28 PM)
 * @return nanocad.util.atomProperty
 */
protected int getSelectedIndexInOwner() {
	String selectedItem = pdlist.getSelectedItem();
	if (selectedItem == null) return -1;
	int startIndex = selectedItem.lastIndexOf(propertySeperator) + propertySeperator.length();
	if(startIndex < propertySeperator.length()) startIndex = 0;
	return Integer.parseInt(selectedItem.substring(startIndex, selectedItem.indexOf(" ", startIndex)));
}
/**
 * Insert the method's description here.
 * Creation date: (6/22/00 4:38:28 PM)
 * @return nanocad.util.atomProperty
 */
protected atomProperty getSelectedSubPropertyOwner() {
	String selectedItem = pdlist.getSelectedItem();
	if (selectedItem == null) return currentProperty;
	return getSelectedSubPropertyOwner(selectedItem, currentProperty);
}
/**
 * Insert the method's description here.
 * Creation date: (6/22/00 4:38:28 PM)
 * @return nanocad.util.atomProperty
 */
private atomProperty getSelectedSubPropertyOwner(String listingToParse, atomProperty propertyRoot) {
	int indexOfSeperator = listingToParse.indexOf(propertySeperator);
	if (indexOfSeperator < 0) return propertyRoot;
	int subpropertyIndex = Integer.parseInt(listingToParse.substring(0, listingToParse.indexOf(" ")));
	String newListing = listingToParse.substring(indexOfSeperator + propertySeperator.length(), listingToParse.length());
	return getSelectedSubPropertyOwner(newListing, propertyRoot.getParameterAsProperty(subpropertyIndex));
}
	static public void main(String args[])
	{
		(new Frame1()).show();
	}
	//new Property menu action
	void menuItem1_Action(java.awt.event.ActionEvent event)
	{
		currentPropertyIndex = -1;
		currentProperty = new atomProperty();
			 
		//{{CONNECTION
		// Enable the TextField
		textField1.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Enable the TextField
		aNumberField.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Clear the Checkbox
		checkbox1.setState(false);
		//}}
			 
		//{{CONNECTION
		// Enable the Checkbox
		checkbox1.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Enable the Button
		button1.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Enable the Button
		button2.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Enable the List
		pdlist.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Enable the Button
		button3.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Enable the Button
		database_add.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Enable the List
		biplist.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Clear the text for TextField
		textField1.setText("");
		//}}
			 
		//{{CONNECTION
		// Clear the text for TextField
		aNumberField.setText("");
		//}}
			 
		//{{CONNECTION
		// Clear the List
		pdlist.removeAll();
		//}}
			 
		//{{CONNECTION
		// Enable the MenuItem
		menuItem2.setEnabled(true);
		//}}
			 
		//{{CONNECTION
		// Disable the MenuItem
		//menuItem3.disable();
		//}}
	}
	void menuItem2_Action(java.awt.event.ActionEvent event)
	{
		database_add_Action(event);
	}
	void miAbout_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from About Create and show as modal
		(new AboutDialog(this, true)).show();
		//}}
	}
	void miExit_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from Exit Create and show as modal
		(new QuitDialog(this, true)).show();
		//}}
	}
	//edit property
	void miOpen_Action(java.awt.event.ActionEvent event)
	{
		pDialog.openForSelect();
		currentPropertyIndex = pDialog.getSelectedIndex();
		if (pDialog.dialogWasCancelled())
			return;
		currentProperty = aFile.getProperty(currentPropertyIndex);
		currentProperty.setName(pDialog.getItem(pDialog.getSelectedIndex()));
		refreshPropertyDefinitionList();
		textField1.setText(currentProperty.getName());
		if(currentProperty.getANumber() == 255)
		{
			aNumberField.setEnabled(false);
			checkbox1.setState(true);
		}
		else
		{
			checkbox1.setState(false);
			aNumberField.setText(Integer.toString(currentProperty.getANumber()));
		}
			 
		//{{CONNECTION
		// Disable the TextField
		textField1.setEnabled(false);
		//}}
			 
		//{{CONNECTION
		// Disable the TextField
		aNumberField.setEnabled(false);
		//}}
			 
		//{{CONNECTION
		// Disable the Checkbox
		checkbox1.setEnabled(false);
		//}}
			 

		//{{CONNECTION
		// Disable the MenuItem
		menuItem2.setEnabled(false);
		//}}
			 
		//{{CONNECTION
		// Enable the MenuItem
		menuItem3.setEnabled(true);
		//}}
	}
	void miReorder_Action(java.awt.event.ActionEvent event)
	{
		pDialog.openForReorder();	
	}
	//Save Database menu item
	void miSaveAs_Action(java.awt.event.ActionEvent event)
	{
	    try
	    {
		PrintWriter out  = new PrintWriter(new BufferedWriter(new FileWriter(newNanocad.txtDir + 
    			newNanocad.fileSeparator + "p.txt")));
		//PrintWriter out  = new PrintWriter(new BufferedWriter(new FileWriter("p.txt")));
		for(int i = 0; i < pDialog.getItemCount(); i++)
		    out.println(pDialog.getItem(i));
		out.close();
	    }
	    catch(IOException e)
	    {
		System.out.println("File write error: " + e.toString());
		e.printStackTrace();
	    }

	    aFile.writeFile();

	}
/**
 * Insert the method's description here.
 * Creation date: (6/22/00 5:33:28 PM)
 */
public void refreshPropertyDefinitionList() 
{
	pdlist.removeAll();
	addPropertiesToList(currentProperty);
}
	//remove property
	void removeProperty_Action(java.awt.event.ActionEvent event)
	{
	pDialog.openForSelect();
	int index = pDialog.getSelectedIndex();
	if (pDialog.dialogWasCancelled())
		return;
	aFile.removeProperty(index);
	pDialog.removeItem(index);
	menuItem1_Action(event);
	
	}
/**
 * Insert the method's description here.
 * Creation date: (6/22/00 4:38:28 PM)
 * @return nanocad.util.atomProperty
 */
private atomProperty replaceSelectedSubPropertyOwnerWith(String listingToParse, atomProperty propertyRoot ,atomProperty newOwner) {
	int indexOfSeperator = listingToParse.indexOf(propertySeperator);
	if (indexOfSeperator < 0) return newOwner;
	int subpropertyIndex = Integer.parseInt(listingToParse.substring(0, listingToParse.indexOf(" ")));
	String newListing = listingToParse.substring(indexOfSeperator + propertySeperator.length(), listingToParse.length());
	newOwner = replaceSelectedSubPropertyOwnerWith(newListing, propertyRoot.getParameterAsProperty(subpropertyIndex), newOwner);
	propertyRoot.replacePropertyParameter(subpropertyIndex, newOwner);
	return propertyRoot;
}
/**
 * Insert the method's description here.
 * Creation date: (6/22/00 4:38:28 PM)
 * @return nanocad.util.atomProperty
 */
protected void replaceSelectedSubPropertyOwnerWith(atomProperty newOwner) {
	String selectedItem = pdlist.getSelectedItem();
	if (selectedItem == null)
	{
		currentProperty = newOwner;
		return;
	}
	currentProperty = replaceSelectedSubPropertyOwnerWith(selectedItem, currentProperty, newOwner);
}
	public synchronized void show()
	{
		move(50, 50);
		super.show();
	}
	void textField1_TextValueChanged(java.awt.event.TextEvent event)
	{
		currentProperty.setName(textField1.getText());
	}
}
