/* The following code was generated by JFlex 1.4.3 on 8/8/12 3:23 PM */
package org.gridchem.client;
import org.gridchem.client.*;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/8/12 3:23 PM from the specification file
 * <tt>/Users/fanye/Documents/workspace/GridChem/GridChem/src/CUP_FLEX/mfinalcoord.flex</tt>
 */
public class MFinalCoordLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INPUTF = 30;
  public static final int ITER2 = 4;
  public static final int INPUTE = 28;
  public static final int INPUTD = 26;
  public static final int INPUTC = 24;
  public static final int INPUTB = 22;
  public static final int INPUTA = 20;
  public static final int INTVALUE = 8;
  public static final int INPUT = 18;
  public static final int IGNOREALL = 16;
  public static final int ITER = 2;
  public static final int YYINITIAL = 0;
  public static final int FLOAT2 = 14;
  public static final int FLOAT1 = 12;
  public static final int FLOATVALUE = 10;
  public static final int ITER3 = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0, 39,  5,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 27,  0,  0,  0,  0,  0, 
     0,  7, 31, 12, 15, 17,  6, 29, 28, 11,  3,  3, 30, 10, 16,  9, 
     3,  3, 14, 18,  8,  3,  3,  3, 36, 37, 38,  0,  0,  0,  0,  2, 
     0, 20,  3,  3, 22, 26,  3, 33, 34, 25,  3,  3, 32,  3, 21, 24, 
     3,  3, 23, 35, 19,  3,  3,  3,  3,  3,  3,  0,  4,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\6\1\1\2\2\1\2\3\11\1\25\0\1\4"+
    "\1\5\1\6\1\7\120\0\1\10\20\0\1\11\6\0"+
    "\1\12\6\0\1\13\25\0\1\14\45\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u0280\0\u02a8\0\u0190\0\u02d0\0\u02f8\0\u0320\0\u0348"+
    "\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u02f8\0\u0550\0\u0348\0\u0578"+
    "\0\u0398\0\u05a0\0\u03e8\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668"+
    "\0\u0690\0\u06b8\0\u06e0\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848"+
    "\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988"+
    "\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8"+
    "\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08"+
    "\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48"+
    "\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88"+
    "\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8"+
    "\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108"+
    "\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248"+
    "\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u0190"+
    "\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0"+
    "\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0"+
    "\0\u0190\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u0190"+
    "\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u0190\0\u17e8"+
    "\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68"+
    "\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u0190\0\u1b30\0\u1b58\0\u1b80"+
    "\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0"+
    "\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00"+
    "\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2080"+
    "\0\u20a8\0\u20d0\0\u0190";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\13\1\14\12\13\1\15\35\13\1\16\7\13\1\17"+
    "\16\13\1\20\61\13\1\21\2\13\1\22\42\13\1\23"+
    "\2\13\1\24\1\25\2\13\7\25\1\13\15\25\1\13"+
    "\13\25\2\13\1\26\2\13\1\27\42\13\1\27\1\13"+
    "\1\30\2\13\1\31\42\13\1\31\1\13\1\32\2\13"+
    "\1\33\42\13\1\33\1\13\1\34\2\13\1\35\42\13"+
    "\1\35\44\13\1\36\3\13\60\0\1\37\62\0\1\40"+
    "\60\0\1\41\31\0\1\42\61\0\1\43\20\0\1\21"+
    "\47\0\1\21\45\0\1\44\1\0\1\25\47\0\1\45"+
    "\3\0\1\46\43\0\1\45\47\0\1\47\3\0\1\50"+
    "\43\0\1\47\47\0\1\51\3\0\1\52\43\0\1\51"+
    "\47\0\1\53\3\0\1\54\43\0\1\53\63\0\1\55"+
    "\43\0\1\56\62\0\1\57\44\0\1\60\43\0\1\61"+
    "\57\0\1\62\71\0\1\63\1\0\1\64\47\0\1\65"+
    "\47\0\1\66\47\0\1\67\63\0\1\70\44\0\1\71"+
    "\62\0\1\72\24\0\1\73\62\0\1\74\60\0\1\75"+
    "\70\0\1\76\15\0\1\77\45\0\1\100\62\0\1\101"+
    "\42\0\1\102\35\0\1\103\55\0\1\104\101\0\1\105"+
    "\15\0\1\106\46\0\1\107\57\0\1\110\43\0\1\111"+
    "\37\0\1\112\77\0\1\113\56\0\1\114\15\0\1\115"+
    "\47\0\1\116\61\0\1\117\37\0\1\120\41\0\1\121"+
    "\70\0\1\122\64\0\1\123\15\0\1\124\46\0\1\125"+
    "\61\0\1\126\23\0\1\127\57\0\1\130\62\0\1\131"+
    "\71\0\1\132\15\0\1\133\43\0\1\134\53\0\1\135"+
    "\43\0\1\136\53\0\1\137\73\0\1\140\55\0\1\141"+
    "\15\0\1\142\43\0\1\143\66\0\1\144\25\0\1\145"+
    "\56\0\1\146\55\0\1\147\73\0\1\150\15\0\1\151"+
    "\50\0\1\152\60\0\1\153\22\0\1\154\62\0\1\155"+
    "\74\0\1\156\54\0\1\157\15\0\1\160\51\0\1\161"+
    "\61\0\1\162\24\0\1\163\56\0\1\164\75\0\1\165"+
    "\53\0\1\166\15\0\1\167\45\0\1\170\66\0\1\171"+
    "\30\0\1\172\50\0\1\173\50\0\1\174\101\0\1\175"+
    "\15\0\1\176\52\0\1\177\54\0\1\200\60\0\1\201"+
    "\45\0\1\202\44\0\1\203\65\0\1\204\15\0\1\205"+
    "\41\0\1\206\63\0\1\207\45\0\1\210\35\0\1\211"+
    "\65\0\1\212\71\0\1\213\15\0\1\214\42\0\1\215"+
    "\63\0\1\216\41\0\1\217\46\0\1\220\101\0\1\221"+
    "\45\0\1\222\23\0\1\223\51\0\1\224\61\0\1\225"+
    "\51\0\1\226\57\0\1\227\15\0\1\230\54\0\1\231"+
    "\56\0\1\232\37\0\1\233\56\0\1\234\66\0\1\235"+
    "\15\0\1\236\62\0\1\237\34\0\1\240\74\0\1\241"+
    "\54\0\1\242\15\0\1\243\57\0\1\244\51\0\1\210"+
    "\67\0\1\245\15\0\1\246\65\0\1\247\63\0\1\250"+
    "\15\0\1\251\101\0\1\252\15\0\1\253\101\0\1\254"+
    "\15\0\1\255\101\0\1\256\15\0\1\257\101\0\1\260"+
    "\15\0\1\261\101\0\1\262\15\0\1\263\101\0\1\264"+
    "\15\0\1\265\101\0\1\266\15\0\1\267\101\0\1\270"+
    "\15\0\1\271\101\0\1\272\15\0\1\273\101\0\1\274"+
    "\46\0\1\275\50\0\1\276\47\0\1\277\47\0\1\300"+
    "\47\0\1\301\47\0\1\302\47\0\1\303\47\0\1\304"+
    "\47\0\1\305\47\0\1\306\47\0\1\307\47\0\1\310"+
    "\47\0\1\311\47\0\1\312\47\0\1\313\47\0\1\314"+
    "\47\0\1\315\47\0\1\316\47\0\1\317\47\0\1\320"+
    "\47\0\1\321\47\0\1\322\47\0\1\323\47\0\1\324"+
    "\47\0\1\325\47\0\1\326\47\0\1\327\47\0\1\330"+
    "\47\0\1\331\47\0\1\332\47\0\1\333\47\0\1\334"+
    "\47\0\1\335\47\0\1\336\47\0\1\337\47\0\1\340"+
    "\47\0\1\341\47\0\1\342\47\0\1\343";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\10\1\1\11\12\1\25\0\4\1\120\0"+
    "\1\11\20\0\1\11\6\0\1\11\6\0\1\11\25\0"+
    "\1\11\45\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static boolean DEBUG = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MFinalCoordLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MFinalCoordLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { yybegin (INPUTA);
   return new Symbol(MFinalCoordSym.INPUT2, new Integer(yytext()));
          }
        case 14: break;
        case 7: 
          { yybegin (INPUT);
   return new Symbol(MFinalCoordSym.INPUT7, new Float(yytext()));
          }
        case 15: break;
        case 8: 
          { yybegin(IGNOREALL);
      return new Symbol(MFinalCoordSym.SCFDONE);
          }
        case 16: break;
        case 10: 
          { yybegin(INPUTF);
            return new Symbol(MFinalCoordSym.INPUT1);
          }
        case 17: break;
        case 5: 
          { yybegin (INPUTD);
   return new Symbol(MFinalCoordSym.INPUT5, new Float(yytext()));
          }
        case 18: break;
        case 12: 
          { yybegin (INPUT);
   return new Symbol(MFinalCoordSym.DASH1);
          }
        case 19: break;
        case 4: 
          { yybegin (INPUTC);
   return new Symbol(MFinalCoordSym.INPUT4, new Float(yytext()));
          }
        case 20: break;
        case 3: 
          { yybegin (INPUTB);
   return new Symbol(MFinalCoordSym.INPUT3);
          }
        case 21: break;
        case 6: 
          { yybegin (INPUTE);
   return new Symbol(MFinalCoordSym.INPUT6, new Float(yytext()));
          }
        case 22: break;
        case 11: 
          { yybegin(ITER);
           return new Symbol(MFinalCoordSym.FOUNDITER);
          }
        case 23: break;
        case 9: 
          { yybegin(ITER);
	   return new Symbol(MFinalCoordSym.FOUNDITER);
          }
        case 24: break;
        case 13: 
          { yybegin (ITER);
   return new Symbol(MFinalCoordSym.DASH2);
          }
        case 25: break;
        case 1: 
          { 
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(MFinalCoordSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = MFinalCoordSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MFinalCoordLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        MFinalCoordLexer scanner = null;
        try {
          scanner = new MFinalCoordLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
