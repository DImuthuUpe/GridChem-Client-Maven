package org.gridchem.client;
import org.gridchem.client.*;
import org.gridchem.client.common.Settings;
/* The following code was generated by JFlex 1.3.5 on 11/14/02 10:25 AM */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/14/02 10:25 AM from the specification file
 * <tt>file:/home/dodi/new_qcrjm/gaussian/gscfa.flex</tt>
 */
public class GSCFaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ITER2 = 3;
  final public static int DASH = 5;
  final public static int INTVALUE = 1;
  final public static int SCF1 = 1;
  final public static int IGNOREALL = 1;
  final public static int ITER = 2;
  final public static int YYINITIAL = 0;
  final public static int ITER7 = 10;
  final public static int ITER6 = 9;
  final public static int ITER5 = 8;
  final public static int FLOATVALUE = 6;
  final public static int ITER4 = 7;
  final public static int ITER3 = 4;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0, 23,  4,  0, 
     1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0, 
     0, 14, 22, 19, 11,  7,  0, 17, 20,  5,  0,  0, 15, 12, 16, 13, 
     0,  0,  8, 21,  6,  0, 24,  0, 10, 18,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    25,    50,    75,   100,   125,   150,   175,   200,   225, 
      250,   275,   300,   275,   325,   350,   275,   375,   275,   400, 
      425,   275,   450,   475,   500,   525,   550,   575,   600,   625, 
      650,   675,   700,   725,   750,   450,   775,   500,   800,   550, 
      825,   600,   850,   650,   875,   900,   925,   950,   975,   800, 
      825,   850,   875,  1000,  1025,  1050,  1075,  1100,  1125,  1150, 
     1175,  1200,  1225,  1250,  1275,  1300,  1325,  1350,  1375,  1400, 
     1425,  1450,  1475,  1500,  1525,  1550,  1575,  1600,  1625,  1650, 
     1675,  1700,  1725,  1750,  1775,  1800,  1825,  1850,  1875,  1900, 
     1925,  1950,  1975,  2000,  2025,  2050,  2075,  2100,  2125,  2150, 
     2175,  2200,  2225,  2250,  2275,  2300,   275,   275,   275,  2325, 
     2350,  2375,  2400,  2425,  2450,  2475,  2500,  2525,  2550,  2575, 
     2600,  2625,  2650,  2675,  2700,  2725,  2750,  2775,  2800,  2825, 
     2850,  2875,  2900,  2925,  2950,  2975,  3000,  3025,  3050,  3075, 
     3100,  3125,  3150,  3175,  3200,  3225,  3250,  3275,  3300,  3325, 
     3350,  3375,  3400,  3425,  3450,  3475,  3500,  3525,  3550,  3575, 
     3600,  3625,  3650,  3675,  3700,  3725,  3750,  3775,  3800,  3825, 
     3850,  3875,   275,   275
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\5\14\1\15\55\14\1\16\1\17\24\14\1\20\2\14"+
    "\1\21\1\22\27\14\1\23\1\24\41\14\1\25\15\14"+
    "\1\26\3\27\23\26\1\30\1\26\1\14\2\31\1\32"+
    "\23\14\1\32\2\14\2\33\1\34\23\14\1\34\2\14"+
    "\2\35\1\36\23\14\1\36\2\14\2\37\1\40\23\14"+
    "\1\40\1\14\37\0\1\41\23\0\2\17\55\0\1\42"+
    "\2\0\2\22\27\0\2\24\35\0\1\43\22\0\2\44"+
    "\27\0\2\44\24\0\1\45\2\0\2\46\1\0\1\47"+
    "\25\0\2\46\27\0\2\50\1\0\1\51\25\0\2\50"+
    "\27\0\2\52\1\0\1\53\25\0\2\52\27\0\2\54"+
    "\1\0\1\55\25\0\2\54\35\0\1\56\50\0\1\57"+
    "\21\0\1\60\37\0\1\61\2\0\2\62\27\0\2\63"+
    "\27\0\2\64\27\0\2\65\36\0\1\66\47\0\1\67"+
    "\26\0\1\70\32\0\1\71\12\0\1\72\46\0\1\73"+
    "\6\0\1\74\52\0\1\75\10\0\1\76\50\0\1\77"+
    "\7\0\1\100\51\0\1\101\13\0\1\102\45\0\1\103"+
    "\23\0\1\104\35\0\1\105\12\0\1\106\46\0\1\107"+
    "\12\0\1\110\46\0\1\111\14\0\1\112\44\0\1\113"+
    "\24\0\1\114\34\0\1\115\10\0\1\116\50\0\1\117"+
    "\16\0\1\120\42\0\1\121\15\0\1\122\43\0\1\123"+
    "\21\0\1\124\37\0\1\125\12\0\1\126\46\0\1\127"+
    "\31\0\1\130\27\0\1\131\12\0\1\132\46\0\1\133"+
    "\10\0\1\134\50\0\1\135\12\0\1\136\46\0\1\137"+
    "\11\0\1\140\47\0\1\141\12\0\1\142\46\0\1\143"+
    "\22\0\1\144\36\0\1\145\7\0\1\146\51\0\1\147"+
    "\10\0\1\150\50\0\1\151\16\0\1\152\42\0\1\153"+
    "\14\0\1\154\44\0\1\155\7\0\1\156\40\0\1\157"+
    "\31\0\1\160\22\0\1\161\26\0\1\162\41\0\1\163"+
    "\17\0\1\164\31\0\1\165\41\0\1\166\31\0\1\167"+
    "\17\0\1\170\30\0\1\171\30\0\1\172\30\0\1\173"+
    "\30\0\1\174\30\0\1\175\30\0\1\176\26\0\1\177"+
    "\32\0\1\200\42\0\1\201\31\0\1\202\22\0\1\203"+
    "\32\0\1\204\31\0\1\205\16\0\1\206\32\0\1\207"+
    "\30\0\1\210\32\0\1\211\24\0\1\212\41\0\1\213"+
    "\35\0\1\214\10\0\1\215\31\0\1\216\44\0\1\217"+
    "\17\0\1\220\42\0\1\221\31\0\1\222\22\0\1\223"+
    "\32\0\1\224\31\0\1\225\16\0\1\226\32\0\1\227"+
    "\30\0\1\230\30\0\1\231\30\0\1\232\30\0\1\233"+
    "\1\0\1\234\32\0\1\235\20\0\1\236\33\0\1\237"+
    "\25\0\1\240\51\0\1\241\27\0\1\242\7\0\1\243"+
    "\35\0\1\244\30\0\1\245\26\0\1\246\42\0\1\247"+
    "\17\0\1\250\30\0\1\251\30\0\1\252\36\0\1\253"+
    "\27\0\1\254\26\0\1\255\25\0\1\256\20\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  9,  1,  1, 
     9,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  public static boolean DEBUG = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GSCFaLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GSCFaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3900];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 107: 
          { 
  yybegin(IGNOREALL);
  return new Symbol(GSCFaSym.SCFDONE);
   }
        case 175: break;
        case 50: 
          {  if (Settings.DEBUG) System.out.println("GSCFaFlex: ITER5");
   if (Settings.DEBUG) System.out.println("GSCFaFlex: Found float1");
   yybegin (ITER6);
    return new Symbol(GSCFaSym.FLOAT1); 
 }
        case 176: break;
        case 108: 
          { 
               yybegin(DASH);
   }
        case 177: break;
        case 106: 
          { 
       if (Settings.DEBUG) System.out.println("GSCFaFlex: Found the dash");
               yybegin(DASH); }
        case 178: break;
        case 18: 
        case 19: 
          { 
  if (Settings.DEBUG) System.out.println("GSCFaFlex: Found the third integer in the iteration");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER4);
    return new Symbol(GSCFaSym.INT2, new Integer(yytext())); }
        case 179: break;
        case 13: 
        case 14: 
          { 
     if (Settings.DEBUG) System.out.println("GSCFaFlex: Found the first integer in the iteration");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER2);
   return new Symbol(GSCFaSym.INTCycle, new Integer(yytext())); }
        case 180: break;
        case 51: 
          { 
  if  (Settings.DEBUG) System.out.println("GSCFaFlex: Found float2");
  yybegin (ITER7);
   return new Symbol(GSCFaSym.FLOAT2);
 }
        case 181: break;
        case 52: 
          { 
     if  (Settings.DEBUG) System.out.println("GSCFaFlex: Found float3");
     yybegin(ITER);
      return new Symbol(GSCFaSym.FLOAT3); }
        case 182: break;
        case 16: 
        case 17: 
          { 
     if (Settings.DEBUG) System.out.println("GSCFaFlex: Found the second integer in the iteration");
     if (Settings.DEBUG) System.out.println(yytext());
     yybegin(ITER3); 
      return new Symbol(GSCFaSym.INT1, new Integer(yytext())); }
        case 183: break;
        case 35: 
          { 
   if  (Settings.DEBUG) System.out.println("GSCFaFlex: Found float value");
  yybegin(ITER);  }
        case 184: break;
        case 49: 
          { 
   if (Settings.DEBUG) System.out.println("GSCFaFlex: Found the energy");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER5);
   return new Symbol(GSCFaSym.ENERGY, new Float(yytext())); }
        case 185: break;
        case 172: 
          { 
    if (Settings.DEBUG) System.out.println("GSCFaFlex: Found ITER EX DEM etc");
           yybegin(ITER);
           return new Symbol(GSCFaSym.FOUNDITER);
   }
        case 186: break;
        case 21: 
        case 22: 
        case 23: 
          { if  (Settings.DEBUG) System.out.println("GSCFaFlex: Found new line"); }
        case 187: break;
        case 173: 
          { 
    if (Settings.DEBUG) System.out.println("GSCFaFlex: Found ITER EX DEM etc");
	   yybegin(ITER);
	   return new Symbol(GSCFaSym.FOUNDITER); 
   }
        case 188: break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
          {  }
        case 189: break;
        case 20: 
          {  }
        case 190: break;
        case 15: 
          {  }
        case 191: break;
        case 11: 
        case 12: 
          {  }
        case 192: break;
        case 30: 
        case 31: 
          {  }
        case 193: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(GSCFaSym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   * <a href="http://meissner.v0.net/msd.htm">meissner.v0.net/msd.htm</a>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] class_fields = GSCFaSym.class.getFields();
      for (int i = 0; i < class_fields.length; i++) {
        if (class_fields[i].getInt(null) == token) {
          return class_fields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   * <a href="http://meissner.v0.net/msd.htm">meissner.v0.net/msd.htm</a>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, i.e. it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java GSCFaLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        GSCFaLexer scanner = null;
        try {
          scanner = new GSCFaLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
