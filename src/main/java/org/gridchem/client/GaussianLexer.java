/*Copyright (c) 2004,University of Illinois at Urbana-Champaign.  All rights reserved.

Developed by:
Chemistry and Computational Biology Group

NCSA, University of Illinois at Urbana-Champaign

http://ncsa.uiuc.edu/GridChem

Permission is hereby granted, free of charge, to any person 
obtaining a copy of this software and associated documentation
files (the "Software") to deal with the Software without
restriction, including without limitation the rights to use, 
copy, modify, merge, publish, distribute, sublicense, and/or 
sell copies of the Software, and to permit persons to whom 
the Software is furnished to do so, subject to the following 
conditions:
1. Redistributions of source code must retain the above copyright notice, 
   this list of conditions and the following disclaimers.
2. Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimers in the documentation
   and/or other materials provided with the distribution.
3. Neither the names of Chemistry and Computational Biology Group , NCSA, 
   University of Illinois at Urbana-Champaign, nor the names of its contributors 
   may be used to endorse or promote products derived from this Software without 
   specific prior written permission.
    
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  
IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS WITH THE SOFTWARE.

*/                  

/* The following code was generated by JFlex 1.3.5 on 10/7/02 11:26 AM */
package org.gridchem.client;


import java.io.*;

import org.gridchem.client.*;
import org.gridchem.client.common.Settings;
import org.gridchem.client.util.*;

import java_cup.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/7/02 11:26 AM from the specification file
 * <tt>file:/home/dodi/new_qcrjm/gaussian/gaussian.flex</tt>
 */
public class GaussianLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IGNOREALL = 3;
  public static final int ITER1 = 2;
  public static final int YYINITIAL = 0;
  public static final int ITER = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0, 
     0,  0,  9,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0, 13,  0, 12,  0,  0,  0,  0,  7,  0,  0, 
     8,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0, 19,  0,  0, 15,  0, 14,  0,  0,  0,  0,  0,  0,  3, 
     4,  0, 16, 18,  5, 17,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int yy_rowMap [] = { 
        0,    20,    40,    60,    80,   100,   120,   140,   160,   180, 
      200,   220,   240,   260,   280,   300,   320,   340,   360,   380, 
      400,   420,   440,   460,    80,   480,   500,   520,   540,   560, 
      580,    80,   320,   600,   620,   640,   660,    80,    80,    80, 
       80,    80,   680,    80,    80,    80,    80,   700,   720,    80, 
      740,    80,   760,   780,   800,   820,   840,   860,   880,   900, 
      920,   940,   960,   980,  1000,  1020,  1040,  1060,  1080,  1100, 
     1120,  1140,  1160,  1180,  1200,  1220,  1240,  1260,  1280,  1300, 
     1320,  1340,  1360,  1380,  1400,  1420,  1440,  1460,  1480,  1500, 
     1520,  1540,  1560,  1580,  1600,  1620,  1640,  1660,  1680,  1700, 
     1720,  1740,  1760,  1780,  1800,  1820,  1840,  1860,  1880,  1900, 
     1920,  1940,  1960,  1980,  2000,  2020,  2040,  2060,  2080,  2100, 
       80,    80
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  private static final String yy_packed0 = 
    "\2\5\1\6\24\5\1\7\3\5\1\10\3\5\1\11"+
    "\2\5\1\12\1\5\1\13\1\14\4\5\1\15\1\16"+
    "\3\5\1\17\3\5\1\20\2\5\1\21\1\5\1\22"+
    "\1\23\1\24\25\5\26\0\1\25\25\0\1\26\27\0"+
    "\1\27\27\0\1\30\26\0\1\31\22\0\1\32\23\0"+
    "\1\33\7\0\1\34\25\0\1\35\27\0\1\36\27\0"+
    "\1\37\26\0\1\40\22\0\1\41\23\0\1\42\30\0"+
    "\1\43\2\0\1\44\26\0\1\45\27\0\1\46\1\47"+
    "\26\0\1\50\25\0\1\51\23\0\1\52\6\0\1\53"+
    "\26\0\1\54\27\0\1\55\27\0\1\56\25\0\1\57"+
    "\23\0\1\60\6\0\1\61\27\0\1\62\17\0\1\63"+
    "\22\0\1\64\24\0\1\65\23\0\1\66\23\0\1\67"+
    "\23\0\1\70\23\0\1\71\23\0\1\72\23\0\1\73"+
    "\23\0\1\74\23\0\1\75\23\0\1\76\23\0\1\77"+
    "\23\0\1\100\23\0\1\101\23\0\1\102\23\0\1\103"+
    "\23\0\1\104\23\0\1\105\23\0\1\106\23\0\1\107"+
    "\23\0\1\110\23\0\1\111\23\0\1\112\23\0\1\113"+
    "\23\0\1\114\23\0\1\115\23\0\1\116\23\0\1\117"+
    "\23\0\1\120\23\0\1\121\23\0\1\122\23\0\1\123"+
    "\23\0\1\124\23\0\1\125\23\0\1\126\23\0\1\127"+
    "\23\0\1\130\23\0\1\131\23\0\1\132\23\0\1\133"+
    "\23\0\1\134\23\0\1\135\23\0\1\136\23\0\1\137"+
    "\23\0\1\140\23\0\1\141\23\0\1\142\23\0\1\143"+
    "\23\0\1\144\23\0\1\145\23\0\1\146\23\0\1\147"+
    "\23\0\1\150\23\0\1\151\23\0\1\152\23\0\1\153"+
    "\23\0\1\154\23\0\1\155\23\0\1\156\23\0\1\157"+
    "\23\0\1\160\23\0\1\161\23\0\1\162\23\0\1\163"+
    "\23\0\1\164\23\0\1\165\23\0\1\166\23\0\1\167"+
    "\23\0\1\170\23\0\1\171\23\0\1\172\21\0";

  /** 
   * The transition table of the DFA
   */
  private static final int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  0,  9,  9,  9,  9,  0, 
     0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  public static boolean DEBUG = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GaussianLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GaussianLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[2120];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 49: 
          { 
  if  (Settings.DEBUG) System.out.println("GaussianFlex: Found opt ");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr +
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() +	 
	       		Settings.fileSeparator + "runtype1"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(ITER1);
     return new Symbol(GaussianSym.RUNTYP); 
     }
        case 123: break;
        case 24: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found hf");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() + 
	       		Settings.fileSeparator + "runtype1"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(ITER1);
     return new Symbol(GaussianSym.RUNTYP);
     }
        case 124: break;
        case 38: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found MP4");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() + 
	       		Settings.fileSeparator + "runtype1"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(ITER1);
     return new Symbol(GaussianSym.RUNTYP);
     }
        case 125: break;
        case 39: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found RHF");

   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() + 
	       		Settings.fileSeparator + "runtype1"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(ITER1);
     return new Symbol(GaussianSym.RUNTYP);
     }
        case 126: break;
        case 40: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found rhf");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() + 
	       		Settings.fileSeparator + "runtype1"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(ITER1);
     return new Symbol(GaussianSym.RUNTYP);
     }
        case 127: break;
        case 41: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found uhf");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() + 
	       		Settings.fileSeparator + "runtype1"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(ITER1);
     return new Symbol(GaussianSym.RUNTYP);
     }
        case 128: break;
        case 45: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found RHF");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
    PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() + 
	       		Settings.fileSeparator + "runtype2"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
      yybegin(IGNOREALL);
     return new Symbol(GaussianSym.RUNTYP1);
     }
        case 129: break;
        case 43: 
          { 
  if  (Settings.DEBUG) System.out.println("GaussianFlex: Found opt ");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
  	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() +
	       		Settings.fileSeparator + "runtype2"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(IGNOREALL);   
     return new Symbol(GaussianSym.RUNTYP1);
     }
        case 130: break;
        case 44: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found MP2");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() +
	       		Settings.fileSeparator + "runtype2"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(IGNOREALL);   
     return new Symbol(GaussianSym.RUNTYP1);
     }
        case 131: break;
        case 37: 
          {   
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found MP2");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr +
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() +
	       		Settings.fileSeparator + "runtype1"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(ITER1);
     return new Symbol(GaussianSym.RUNTYP);
     }
        case 132: break;
        case 121: 
          { 
   yybegin(IGNOREALL);
    return new Symbol(GaussianSym.SCFDONE);
    }
        case 133: break;
        case 51: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found scf=");
   if (Settings.DEBUG) System.out.println(yytext());
      yybegin(IGNOREALL);
     return new Symbol(GaussianSym.RUNTYP1);
     }
        case 134: break;
        case 46: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found uhf");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr + 
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() +
	       		Settings.fileSeparator + "runtype2"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(IGNOREALL);
     return new Symbol(GaussianSym.RUNTYP1);
     }
        case 135: break;
        case 31: 
          { 
   if (Settings.DEBUG) System.out.println("GaussianFlex: Found rhf");
   if (Settings.DEBUG) System.out.println(yytext());
 try{
     //PrintStream temp = new PrintStream(new FileOutputStream(Settings.defaultDirStr +
   	 PrintStream temp = new PrintStream(new FileOutputStream(Env.getApplicationDataDir() +
	       		Settings.fileSeparator + "runtype2"));
     temp.print(yytext());
     System.out.println(yytext());}
   catch (IOException ie){ System.out.println("Error in Gaussian Lexer");}
     yybegin(IGNOREALL);
     return new Symbol(GaussianSym.RUNTYP1);
     }
        case 136: break;
        case 120: 
          { 
    if (Settings.DEBUG) System.out.println("GaussianFlex: Found Gaussian 98");
           yybegin(ITER);
	   return new Symbol(GaussianSym.FOUNDITER); 
   }
        case 137: break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
          {  }
        case 138: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   * <a href="http://meissner.v0.net/msd.htm">meissner.v0.net/msd.htm</a>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] class_fields = sym.class.getFields();
      for (int i = 0; i < class_fields.length; i++) {
        if (class_fields[i].getInt(null) == token) {
          return class_fields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   * <a href="http://meissner.v0.net/msd.htm">meissner.v0.net/msd.htm</a>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, i.e. it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java GaussianLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        GaussianLexer scanner = null;
        try {
          scanner = new GaussianLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

