/*Copyright (c) 2004,University of Illinois at Urbana-Champaign.  All rights reserved.

Developed by:
Chemistry and Computational Biology Group

NCSA, University of Illinois at Urbana-Champaign

http://ncsa.uiuc.edu/GridChem

Permission is hereby granted, free of charge, to any person 
obtaining a copy of this software and associated documentation
files (the "Software") to deal with the Software without
restriction, including without limitation the rights to use, 
copy, modify, merge, publish, distribute, sublicense, and/or 
sell copies of the Software, and to permit persons to whom 
the Software is furnished to do so, subject to the following 
conditions:
1. Redistributions of source code must retain the above copyright notice, 
   this list of conditions and the following disclaimers.
2. Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimers in the documentation
   and/or other materials provided with the distribution.
3. Neither the names of Chemistry and Computational Biology Group , NCSA, 
   University of Illinois at Urbana-Champaign, nor the names of its contributors 
   may be used to endorse or promote products derived from this Software without 
   specific prior written permission.
    
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  
IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS WITH THE SOFTWARE.

*/
/* The following code was generated by JFlex 1.4.1 on 1/26/05 10:10 PM */

/* Currently handles Gauss98 test inputs test000.com -- test039.com
 */
package org.gridchem.client;
import org.gridchem.client.*;
import org.gridchem.client.common.Settings;

/* The following code was generated by JFlex 1.4.1 on 10/2/06 3:09 PM */

/* Currently handles Gauss98 test inputs test000.com -- test039.com
 */
   import java_cup.runtime.*;


 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/2/06 3:09 PM from the specification file
 * <tt>pound.flex</tt>
 */
public class Pound implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IGNOREALL = 2;
  public static final int POUND = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 72, 71,  0,  0, 70,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16,  0,  0, 15,  0, 14,  0,  0,  6,  8, 66,  2,  7,  9,  3, 65, 
    51, 60,  1, 61, 63, 62, 39, 51, 59, 68, 69,  0,  0, 31,  0,  0, 
     0, 44, 46, 54, 58, 45, 26, 48, 55, 11, 35, 13, 52, 47, 53, 49, 
    42, 67, 37, 41, 43, 38, 57, 40, 50, 56, 64,  0,  0,  0,  0,  3, 
     0, 20, 23, 24,  4, 21, 26, 28, 25, 11, 35, 13, 10, 27, 12, 33, 
    18, 34, 22, 17, 19, 29, 32,  3, 36, 30, 64,  0,  5,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\1\2\1\3\2\2\1\4\25\2\5\4"+
    "\1\3\2\4\2\2\1\3\7\4\1\3\1\2\1\5"+
    "\2\6\1\0\1\7\1\10\1\11\1\12\1\13\13\0"+
    "\1\3\2\0\1\3\1\4\1\3\20\0\1\14\6\0"+
    "\1\15\15\0\1\16\1\0\1\17\10\0\1\20\11\0"+
    "\1\21\5\0\1\22\12\0\2\4\1\3\30\4\1\0"+
    "\1\5\7\0\1\23\1\24\6\0\1\25\1\26\1\0"+
    "\1\27\6\0\1\30\2\0\1\31\1\0\1\14\3\0"+
    "\1\32\2\0\1\33\3\0\1\34\2\0\1\35\1\36"+
    "\1\0\1\15\1\0\1\37\5\0\1\40\1\0\1\41"+
    "\6\0\1\42\13\0\1\43\4\0\1\44\1\0\1\45"+
    "\1\44\5\0\1\46\5\0\1\47\3\0\1\50\1\51"+
    "\2\0\1\52\4\0\1\4\3\0\1\53\4\0\1\24"+
    "\1\0\1\54\3\0\1\55\5\0\1\56\4\0\1\57"+
    "\1\60\1\61\5\0\1\62\2\0\1\63\4\0\1\33"+
    "\1\0\1\64\16\0\1\65\1\0\2\16\4\0\1\17"+
    "\2\0\2\17\1\66\10\0\1\67\2\0\1\70\2\0"+
    "\2\20\1\0\1\71\1\72\5\0\1\73\12\0\2\21"+
    "\1\74\6\0\2\22\11\0\1\75\4\0\1\76\1\53"+
    "\3\0\2\23\1\0\1\77\6\0\2\25\14\0\2\31"+
    "\3\0\1\100\1\101\1\102\1\0\2\33\5\0\2\34"+
    "\1\0\1\103\2\0\2\15\2\0\2\37\2\0\2\16"+
    "\2\0\2\40\1\17\1\0\2\41\1\17\6\0\1\104"+
    "\2\0\2\42\10\0\2\20\1\105\3\0\1\106\1\0"+
    "\1\107\4\0\2\44\1\0\2\45\5\0\1\21\1\110"+
    "\1\21\4\0\1\111\1\0\2\47\2\22\1\112\1\0"+
    "\2\50\4\0\3\113\3\0\1\114\1\115\1\0\1\53"+
    "\2\0\2\23\1\114\1\77\3\0\2\55\1\0\1\25"+
    "\1\116\1\25\2\0\2\56\1\117\1\0\1\120\1\121"+
    "\1\0\2\122\2\31\1\0\1\123\5\0\2\33\1\124"+
    "\3\0\2\34\2\0\2\15\1\0\2\37\1\0\2\65"+
    "\1\0\2\40\2\41\1\0\2\66\1\125\1\0\1\126"+
    "\1\0\2\42\2\0\2\67\1\0\1\127\1\0\3\130"+
    "\4\0\2\71\1\0\1\131\1\0\2\73\2\44\2\45"+
    "\10\0\2\74\4\0\2\47\2\0\2\50\1\132\1\0"+
    "\1\113\1\0\2\113\1\133\1\0\2\75\5\0\1\134"+
    "\1\0\1\77\1\135\1\136\2\55\3\0\2\56\1\137"+
    "\2\0\2\122\3\0\2\140\1\0\2\102\1\0\1\141"+
    "\1\0\1\142\2\0\2\65\1\0\2\66\3\0\1\126"+
    "\1\0\1\143\2\67\3\0\3\130\1\144\1\0\2\105"+
    "\2\71\2\0\2\73\2\45\1\145\1\146\1\0\2\110"+
    "\2\74\1\147\1\150\1\0\3\111\1\0\2\151\1\0"+
    "\1\113\2\0\2\75\2\0\2\114\1\0\2\115\3\0"+
    "\1\152\1\153\1\0\1\137\1\0\2\121\2\0\1\101"+
    "\1\140\2\102\6\0\2\125\1\0\1\126\1\0\1\154"+
    "\1\0\2\127\1\130\2\105\1\0\2\131\4\0\2\110"+
    "\3\111\1\155\1\151\1\0\1\113\1\0\2\156\1\0"+
    "\1\114\1\157\1\114\2\115\1\160\1\0\2\134\4\0"+
    "\2\121\4\0\1\161\1\0\2\125\1\0\2\127\1\130"+
    "\2\131\1\44\2\45\1\0\2\146\1\111\1\0\1\113"+
    "\1\162\1\156\2\0\2\134\1\0\2\153\1\0\1\26"+
    "\2\0\1\163\1\164\2\0\1\130\2\146\1\111\1\0"+
    "\1\113\2\0\1\114\2\157\2\153\5\0\1\130\1\111"+
    "\1\0\1\113\2\0\2\157\4\0\1\130\1\111\1\165"+
    "\1\113\1\156\5\0\1\130\1\57\1\113\1\0\1\166"+
    "\1\0\1\167\1\130\1\113\4\0\1\57\1\113\2\0"+
    "\2\170\1\57\1\171\1\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[957];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\333"+
    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u01ff\0\u0323\0\u03b5\0\u05fd"+
    "\0\u0646\0\333\0\u07b3\0\u0291\0\u0c43\0\u0c8c\0\u0cd5\0\333"+
    "\0\u0d1e\0\u016d\0\333\0\u0d67\0\333\0\333\0\u01ff\0\u0db0"+
    "\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8"+
    "\0\u1041\0\u0969\0\u108a\0\u0969\0\u10d3\0\u0f66\0\333\0\u111c"+
    "\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364"+
    "\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac"+
    "\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\333\0\u17ab"+
    "\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3"+
    "\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83"+
    "\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb"+
    "\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313"+
    "\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b"+
    "\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u1ace\0\u235c\0\u23a5"+
    "\0\u13f6\0\u143f\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u163e\0\u15f5"+
    "\0\u17ab\0\u1886\0\u19aa\0\u19f3\0\u1ba9\0\u20cb\0\u2082\0\u21a6"+
    "\0\u22ca\0\u2313\0\u24c9\0\u2480\0\u255b\0\u2711\0\333\0\u275a"+
    "\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2"+
    "\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea"+
    "\0\u2c33\0\333\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9"+
    "\0\333\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\333\0\u2f56\0\u2f9f"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7"+
    "\0\u3230\0\u3279\0\u32c2\0\333\0\333\0\u330b\0\u3354\0\u339d"+
    "\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5"+
    "\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d"+
    "\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75"+
    "\0\u3abe\0\u3b07\0\u3b50\0\333\0\u3b99\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc"+
    "\0\u3f05\0\333\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb"+
    "\0\u4104\0\u414d\0\u4196\0\u41df\0\333\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u43de\0\u342f\0\u4427\0\u4470\0\u44b9"+
    "\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\333\0\u466f\0\333"+
    "\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7"+
    "\0\u4900\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\333\0\333"+
    "\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u4bda\0\u4c23\0\333\0\u4c6c"+
    "\0\u4cb5\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4"+
    "\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3\0\u50fc"+
    "\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269\0\u52b2\0\u52fb\0\u5344"+
    "\0\u538d\0\u53d6\0\u541f\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u558c"+
    "\0\u55d5\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b\0\u57d4"+
    "\0\u581d\0\u5866\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c"+
    "\0\u5a65\0\u5aae\0\u5af7\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\333"+
    "\0\u5c64\0\u5cad\0\u5cf6\0\u5d3f\0\u5d88\0\u5dd1\0\u5e1a\0\u5e63"+
    "\0\u5eac\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0\0\u6019\0\u6062\0\u60ab"+
    "\0\u60f4\0\u613d\0\u6186\0\u61cf\0\u6218\0\u6261\0\u62aa\0\u62f3"+
    "\0\u633c\0\u6385\0\u63ce\0\u6417\0\u6460\0\u64a9\0\u64f2\0\u653b"+
    "\0\u6584\0\u65cd\0\u6616\0\u665f\0\u66a8\0\u66f1\0\u673a\0\u6783"+
    "\0\u67cc\0\333\0\u6815\0\u685e\0\u68a7\0\u68f0\0\u6939\0\u6982"+
    "\0\u69cb\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38\0\u6b81\0\u6bca"+
    "\0\u6c13\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37\0\u6d80\0\u6dc9\0\u6e12"+
    "\0\u6e5b\0\u6ea4\0\u6eed\0\u6f36\0\u6f7f\0\u6fc8\0\u7011\0\u705a"+
    "\0\u70a3\0\u70ec\0\u7135\0\333\0\u717e\0\u71c7\0\u7210\0\u7259"+
    "\0\u72a2\0\u72eb\0\u7334\0\u737d\0\u73c6\0\u740f\0\u7458\0\u74a1"+
    "\0\u74ea\0\333\0\u7533\0\u757c\0\u75c5\0\u760e\0\u7657\0\u76a0"+
    "\0\u76e9\0\u7732\0\u777b\0\u77c4\0\u538d\0\u780d\0\u7856\0\u789f"+
    "\0\u78e8\0\u7931\0\u5543\0\u797a\0\u79c3\0\u7a0c\0\u7a55\0\u7a9e"+
    "\0\u7ae7\0\u7b30\0\u7b79\0\u7bc2\0\u7c0b\0\u581d\0\u7c54\0\u7c9d"+
    "\0\u7ce6\0\u7d2f\0\u7d78\0\u7dc1\0\u7e0a\0\u7e53\0\u7e9c\0\u7ee5"+
    "\0\u7f2e\0\u7f77\0\u5af7\0\u7fc0\0\u8009\0\u8052\0\u809b\0\u80e4"+
    "\0\333\0\u812d\0\333\0\u8176\0\u81bf\0\u8208\0\u8251\0\u829a"+
    "\0\u82e3\0\u832c\0\u8375\0\u83be\0\u8407\0\u8450\0\u8499\0\u84e2"+
    "\0\u852b\0\u6062\0\u8574\0\u85bd\0\u8606\0\u864f\0\u8698\0\u86e1"+
    "\0\u872a\0\u8773\0\u87bc\0\u8805\0\u633c\0\u884e\0\u8897\0\u88e0"+
    "\0\u8929\0\u8972\0\u89bb\0\u8a04\0\u8a4d\0\u8a96\0\u8adf\0\u8b28"+
    "\0\u8b71\0\u8bba\0\u8c03\0\u8c4c\0\u8c95\0\u8cde\0\u8d27\0\333"+
    "\0\u8d70\0\u8db9\0\u68f0\0\u8e02\0\u8e4b\0\u8e94\0\u8edd\0\u8f26"+
    "\0\u8f6f\0\u8fb8\0\u9001\0\u904a\0\u6b81\0\333\0\u9093\0\u90dc"+
    "\0\u9125\0\u916e\0\u91b7\0\333\0\u9200\0\333\0\u9249\0\u9292"+
    "\0\u92db\0\u9324\0\u6f7f\0\u936d\0\u93b6\0\333\0\u93ff\0\u9448"+
    "\0\u9491\0\u94da\0\u9523\0\u7210\0\u956c\0\333\0\u95b5\0\u95fe"+
    "\0\u9647\0\u740f\0\u9690\0\u96d9\0\u9722\0\u757c\0\u976b\0\u97b4"+
    "\0\u76a0\0\u97fd\0\u9846\0\u988f\0\u98d8\0\u9921\0\u789f\0\u996a"+
    "\0\u797a\0\u99b3\0\u99fc\0\u9a45\0\u9a8e\0\u9ad7\0\u9b20\0\u9b69"+
    "\0\u9bb2\0\u7c9d\0\u9bfb\0\u9c44\0\u9c8d\0\u9cd6\0\u9d1f\0\u9d68"+
    "\0\u9db1\0\u9dfa\0\u9e43\0\u9e8c\0\u9ed5\0\u9f1e\0\u9f67\0\u9fb0"+
    "\0\u9ff9\0\ua042\0\ua08b\0\ua0d4\0\ua11d\0\ua166\0\ua1af\0\ua1f8"+
    "\0\u8251\0\ua241\0\u832c\0\ua28a\0\ua2d3\0\ua31c\0\ua365\0\ua3ae"+
    "\0\ua3f7\0\ua440\0\ua489\0\ua4d2\0\ua51b\0\ua564\0\ua5ad\0\ua5f6"+
    "\0\ua63f\0\ua688\0\u8773\0\ua6d1\0\ua71a\0\ua763\0\u88e0\0\ua7ac"+
    "\0\333\0\ua7f5\0\u8a4d\0\ua83e\0\ua887\0\ua8d0\0\ua919\0\ua962"+
    "\0\ua9ab\0\ua9f4\0\uaa3d\0\uaa86\0\uaacf\0\uab18\0\uab61\0\uabaa"+
    "\0\uabf3\0\333\0\333\0\333\0\u8f6f\0\uac3c\0\uac85\0\uacce"+
    "\0\uad17\0\u9125\0\uad60\0\uada9\0\uadf2\0\uae3b\0\u9292\0\uae84"+
    "\0\uaecd\0\uaf16\0\uaf5f\0\uafa8\0\uaff1\0\ub03a\0\ub083\0\ub0cc"+
    "\0\ub115\0\333\0\ub15e\0\333\0\ub1a7\0\ub1f0\0\u9846\0\ub239"+
    "\0\ub282\0\u99fc\0\ub2cb\0\ub314\0\ub35d\0\ub3a6\0\ub3ef\0\ub438"+
    "\0\333\0\u9c8d\0\ub481\0\ub4ca\0\ub513\0\ub55c\0\u9dfa\0\ub5a5"+
    "\0\ub5ee\0\333\0\ub637\0\ub680\0\ub6c9\0\u9ff9\0\ub712\0\ub75b"+
    "\0\ub7a4\0\ua166\0\ub7ed\0\ub836\0\ub87f\0\333\0\ub8c8\0\ub911"+
    "\0\ub95a\0\ub9a3\0\ua4d2\0\ub9ec\0\333\0\333\0\uba35\0\uba7e"+
    "\0\ubac7\0\ubb10\0\ubb59\0\ubba2\0\ubbeb\0\ubc34\0\ubc7d\0\ubcc6"+
    "\0\ubd0f\0\ua962\0\ubd58\0\ubda1\0\ubdea\0\ube33\0\ube7c\0\ubec5"+
    "\0\ubf0e\0\ubf57\0\ubfa0\0\ubfe9\0\uc032\0\333\0\uc07b\0\uc0c4"+
    "\0\333\0\uc10d\0\uc156\0\uc19f\0\uc1e8\0\uc231\0\uaf5f\0\uc27a"+
    "\0\ub03a\0\uc2c3\0\uc30c\0\uc355\0\uc39e\0\uc3e7\0\uc430\0\uc479"+
    "\0\uc4c2\0\uc50b\0\uc554\0\333\0\uc59d\0\333\0\uc5e6\0\uc62f"+
    "\0\uc678\0\uc6c1\0\ub637\0\uc70a\0\uc753\0\uc79c\0\uc7e5\0\uc82e"+
    "\0\uc877\0\uc8c0\0\uc909\0\ub911\0\uc952\0\uba35\0\uc99b\0\uc9e4"+
    "\0\ubb59\0\uca2d\0\uca76\0\ucabf\0\ucb08\0\ucb51\0\ucb9a\0\ucbe3"+
    "\0\ubda1\0\ucc2c\0\ucc75\0\ubec5\0\uccbe\0\333\0\ucd07\0\ucd50"+
    "\0\ucd99\0\ucde2\0\uce2b\0\uce74\0\ucebd\0\uc10d\0\ucf06\0\ucf4f"+
    "\0\ucf98\0\ucfe1\0\ud02a\0\333\0\ud073\0\uc479\0\ud0bc\0\ud105"+
    "\0\uc5e6\0\ud14e\0\ud197\0\uc753\0\ud1e0\0\u832c\0\ud229\0\ud272"+
    "\0\ud2bb\0\ud304\0\ud34d\0\ud396\0\ud3df\0\ud428\0\ucb08\0\ud471"+
    "\0\ud4ba\0\ud503\0\ucd07\0\ud54c\0\ud595\0\ud5de\0\ud627\0\ud670"+
    "\0\333\0\ud6b9\0\ud702\0\333\0\333\0\ud74b\0\ud794\0\ud7dd"+
    "\0\ud2bb\0\ud826\0\ud86f\0\ud8b8\0\ud901\0\ud94a\0\ud993\0\ud993"+
    "\0\ud9dc\0\uda25\0\ud595\0\uda6e\0\udab7\0\udb00\0\udb49\0\udb92"+
    "\0\udbdb\0\udc24\0\udc6d\0\udcb6\0\udcff\0\udd48\0\udd91\0\ud993"+
    "\0\uddda\0\ude23\0\ude6c\0\udeb5\0\udefe\0\udf47\0\udf90\0\333"+
    "\0\udfd9\0\udd48\0\ue022\0\ue06b\0\ue0b4\0\ue0fd\0\ue146\0\ue18f"+
    "\0\uba7e\0\ue1d8\0\ue221\0\ue26a\0\ue2b3\0\333\0\ue2fc\0\ue345"+
    "\0\ue38e\0\ue3d7\0\ue420\0\ue469\0\u9e43\0\ue4b2\0\ue4fb\0\ue544"+
    "\0\ue58d\0\ue5d6\0\u8adf\0\ue544\0\ue61f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[957];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\11\4\1\5\4\4\1\6\1\7\71\4\1\10\1\11"+
    "\1\12\1\10\1\13\1\14\3\10\1\12\1\15\1\16"+
    "\1\17\3\10\1\4\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\10\1\35\1\36\1\37\2\10\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\43\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\3\42\2\55\1\65\1\66\1\10"+
    "\1\37\1\42\1\10\1\67\1\70\112\4\122\0\1\71"+
    "\100\0\4\72\1\0\1\72\1\0\6\72\3\0\60\72"+
    "\2\0\2\72\20\0\1\73\3\0\1\74\1\0\1\75"+
    "\1\76\26\0\1\75\1\76\11\0\1\73\24\0\1\77"+
    "\7\0\1\100\35\0\1\77\13\0\1\77\7\0\5\77"+
    "\4\0\1\77\5\0\1\77\45\0\1\77\13\0\1\77"+
    "\7\0\5\77\4\0\1\77\31\0\1\101\1\102\1\0"+
    "\1\103\1\0\1\104\12\0\1\102\7\0\1\101\10\0"+
    "\1\103\15\0\1\105\5\0\1\11\3\0\1\43\22\0"+
    "\1\106\2\0\1\107\5\0\1\110\1\111\4\0\1\42"+
    "\4\43\1\112\2\43\1\113\1\114\1\115\1\43\1\55"+
    "\2\62\1\116\3\62\1\117\3\42\2\55\3\0\1\111"+
    "\1\42\25\0\1\120\1\121\1\0\1\122\24\0\1\120"+
    "\1\121\1\0\1\122\50\0\1\123\11\0\1\124\12\0"+
    "\1\125\3\0\1\124\13\0\1\125\3\0\1\123\47\0"+
    "\1\126\6\0\1\127\5\0\1\130\12\0\1\126\2\0"+
    "\1\127\1\0\1\130\33\0\1\131\15\0\1\132\1\133"+
    "\1\134\1\135\2\0\1\136\1\135\4\0\1\137\1\0"+
    "\1\140\11\0\1\132\1\133\1\134\1\135\10\0\1\136"+
    "\1\135\1\137\1\140\1\131\30\0\1\141\6\0\1\142"+
    "\4\0\1\143\4\0\1\144\1\0\1\145\3\0\1\146"+
    "\3\0\1\143\1\145\2\0\1\142\5\0\1\144\1\0"+
    "\1\146\2\0\1\141\30\0\1\147\20\0\1\150\1\151"+
    "\16\0\1\151\7\0\1\150\14\0\1\147\5\0\1\152"+
    "\22\0\1\153\1\154\12\0\1\155\4\0\1\156\11\0"+
    "\1\155\11\0\1\156\4\0\1\153\46\0\1\157\21\0"+
    "\1\160\5\0\1\157\7\0\1\160\50\0\1\161\2\0"+
    "\1\162\3\0\1\163\7\0\1\164\10\0\1\161\2\0"+
    "\1\162\3\0\1\164\5\0\1\163\25\0\1\165\20\0"+
    "\1\166\27\0\1\166\14\0\1\165\31\0\1\167\6\0"+
    "\1\170\1\0\1\171\1\172\1\0\1\173\1\174\1\175"+
    "\3\0\1\176\3\0\1\177\4\0\1\176\3\0\1\170"+
    "\1\0\1\171\1\172\1\173\2\0\1\177\4\0\1\174"+
    "\1\175\53\0\1\200\71\0\1\201\12\0\1\202\1\0"+
    "\1\203\2\0\1\204\5\0\1\205\3\0\1\202\11\0"+
    "\1\204\1\0\1\205\4\0\1\203\35\0\1\206\1\207"+
    "\5\0\1\210\1\0\1\211\25\0\1\210\1\0\1\211"+
    "\10\0\1\207\24\0\1\212\23\0\1\213\1\214\3\0"+
    "\1\215\2\0\1\216\2\0\1\217\4\0\1\214\1\216"+
    "\6\0\1\213\13\0\1\217\2\0\1\220\30\0\1\221"+
    "\14\0\1\222\1\223\32\0\1\221\1\0\1\222\62\0"+
    "\1\224\17\0\1\224\41\0\1\225\7\0\1\226\12\0"+
    "\1\227\2\0\1\230\5\0\1\227\3\0\1\226\11\0"+
    "\1\225\4\0\1\230\47\0\1\231\35\0\1\231\23\0"+
    "\1\117\3\0\1\43\14\0\1\161\2\0\1\162\2\0"+
    "\1\106\1\163\1\0\1\107\5\0\1\232\1\111\4\0"+
    "\3\43\1\233\1\43\1\112\1\234\1\43\1\113\1\114"+
    "\1\235\1\43\3\62\1\116\1\236\2\62\1\117\3\43"+
    "\2\62\3\0\1\111\1\43\5\0\1\117\3\0\1\43"+
    "\6\0\1\221\13\0\1\106\1\222\1\223\1\107\5\0"+
    "\1\110\1\111\4\0\5\43\1\112\2\43\1\113\1\114"+
    "\1\115\1\43\2\62\1\237\1\116\1\240\2\62\1\117"+
    "\3\43\2\62\3\0\1\111\1\43\5\0\1\77\3\0"+
    "\1\62\3\0\1\100\35\0\1\55\4\62\1\0\2\62"+
    "\3\0\1\62\1\55\6\62\1\0\5\55\4\0\1\55"+
    "\11\0\1\62\41\0\5\62\1\0\2\62\3\0\10\62"+
    "\1\0\5\62\4\0\1\62\10\0\1\131\1\62\14\0"+
    "\1\132\1\133\1\134\1\135\2\0\1\136\1\135\4\0"+
    "\1\137\1\0\1\140\6\0\3\62\1\241\1\242\1\134"+
    "\1\243\1\62\3\0\4\62\1\244\1\243\1\245\1\246"+
    "\1\131\5\62\4\0\1\62\11\0\1\62\4\0\1\141"+
    "\6\0\1\142\4\0\1\143\4\0\1\144\1\0\1\145"+
    "\3\0\1\146\3\0\1\143\1\145\2\62\1\247\2\62"+
    "\1\0\2\62\1\144\1\0\1\146\2\62\1\250\5\62"+
    "\1\0\5\62\4\0\1\62\10\0\1\147\1\62\17\0"+
    "\1\150\1\151\16\0\1\151\1\0\5\62\1\0\1\251"+
    "\1\62\3\0\10\62\1\147\5\62\1\152\3\0\1\62"+
    "\11\0\1\62\4\0\1\153\1\154\12\0\1\155\4\0"+
    "\1\156\11\0\1\155\1\0\5\62\1\0\2\62\1\156"+
    "\2\0\2\62\1\252\5\62\1\0\5\62\4\0\1\62"+
    "\11\0\1\62\14\0\1\157\21\0\1\160\2\0\3\62"+
    "\1\253\1\62\1\0\2\62\3\0\1\254\7\62\1\0"+
    "\5\62\4\0\1\62\10\0\1\165\1\62\17\0\1\166"+
    "\21\0\5\62\1\0\1\255\1\62\3\0\10\62\1\165"+
    "\5\62\4\0\1\62\11\0\1\62\5\0\1\206\1\207"+
    "\5\0\1\210\1\0\1\211\22\0\3\62\1\256\1\62"+
    "\1\211\2\62\3\0\3\62\1\257\4\62\1\0\5\62"+
    "\4\0\1\62\5\0\1\212\3\0\1\62\17\0\1\213"+
    "\1\214\3\0\1\215\2\0\1\216\2\0\1\217\4\0"+
    "\1\214\1\216\5\62\1\0\1\260\1\62\3\0\7\62"+
    "\1\261\1\0\1\62\1\262\3\62\4\0\1\62\11\0"+
    "\1\62\4\0\1\225\7\0\1\226\12\0\1\227\2\0"+
    "\1\230\5\0\1\227\3\62\1\263\1\62\1\0\2\62"+
    "\3\0\2\62\1\264\4\62\1\265\1\0\5\62\4\0"+
    "\1\62\17\0\1\266\176\0\1\267\116\0\1\70\13\0"+
    "\1\270\51\0\1\270\45\0\1\271\27\0\1\271\40\0"+
    "\1\272\1\273\2\0\1\273\3\0\1\273\35\0\1\272"+
    "\13\0\1\272\7\0\5\272\4\0\1\272\20\0\1\274"+
    "\50\0\1\274\50\0\1\275\27\0\1\275\63\0\1\276"+
    "\35\0\1\276\45\0\1\277\27\0\1\277\133\0\1\300"+
    "\25\0\1\167\117\0\1\210\27\0\1\210\76\0\1\230"+
    "\30\0\1\230\47\0\1\301\35\0\1\301\27\0\1\62"+
    "\14\0\1\210\24\0\3\62\1\256\1\62\1\0\2\62"+
    "\3\0\10\62\1\0\5\62\4\0\1\62\11\0\1\62"+
    "\32\0\1\230\6\0\5\62\1\0\2\62\3\0\7\62"+
    "\1\265\1\0\5\62\4\0\1\62\10\0\1\302\65\0"+
    "\1\302\27\0\1\303\113\0\1\304\50\0\1\304\27\0"+
    "\1\305\16\0\1\306\27\0\1\306\16\0\1\305\46\0"+
    "\1\307\35\0\1\307\44\0\1\310\27\0\1\310\71\0"+
    "\1\311\23\0\1\311\57\0\1\312\16\0\1\312\57\0"+
    "\1\313\50\0\1\313\27\0\1\314\65\0\1\314\42\0"+
    "\1\315\27\0\1\315\60\0\1\316\14\0\1\317\12\0"+
    "\1\316\4\0\1\317\67\0\1\320\30\0\1\320\47\0"+
    "\1\321\35\0\1\321\46\0\1\322\1\0\1\323\3\0"+
    "\1\324\12\0\1\323\6\0\1\322\67\0\1\325\23\0"+
    "\1\325\103\0\1\326\77\0\1\327\17\0\1\327\54\0"+
    "\1\330\27\0\1\330\74\0\1\331\17\0\1\331\124\0"+
    "\1\332\27\0\1\333\50\0\1\333\35\0\1\334\7\0"+
    "\1\335\27\0\1\335\11\0\1\334\45\0\1\336\27\0"+
    "\1\336\63\0\1\337\27\0\1\337\74\0\1\326\30\0"+
    "\1\326\42\0\1\340\27\0\1\340\70\0\1\341\23\0"+
    "\1\341\61\0\1\342\35\0\1\342\51\0\1\343\26\0"+
    "\1\343\15\0\1\344\42\0\1\345\16\0\1\345\66\0"+
    "\1\346\27\0\1\346\61\0\1\347\27\0\1\347\60\0"+
    "\1\350\27\0\1\350\66\0\1\351\107\0\1\352\35\0"+
    "\1\352\27\0\1\353\2\0\1\354\25\0\1\355\101\0"+
    "\1\356\35\0\1\356\26\0\1\357\1\0\1\360\12\0"+
    "\1\361\15\0\1\362\11\0\1\361\20\0\1\357\47\0"+
    "\1\363\35\0\1\363\42\0\1\364\11\0\1\365\15\0"+
    "\1\364\5\0\1\365\53\0\1\366\27\0\1\366\57\0"+
    "\1\367\27\0\1\367\43\0\1\370\4\0\1\371\7\0"+
    "\1\372\27\0\1\372\20\0\1\370\33\0\1\373\6\0"+
    "\1\374\27\0\1\374\63\0\1\375\26\0\1\375\65\0"+
    "\1\376\23\0\1\376\37\0\1\377\30\0\1\u0100\76\0"+
    "\1\u0101\27\0\1\u0101\60\0\1\u0102\27\0\1\u0102\64\0"+
    "\1\u0103\35\0\1\u0103\54\0\1\u0104\23\0\1\u0104\57\0"+
    "\1\u0105\16\0\1\u0105\47\0\1\u0106\7\0\1\u0107\50\0"+
    "\1\u0107\4\0\1\u0106\22\0\1\u0108\65\0\1\u0108\17\0"+
    "\1\u0109\1\u010a\2\0\1\u010a\3\0\1\u010a\35\0\1\u0109"+
    "\13\0\1\u0109\7\0\3\u0109\1\u010b\1\u010c\4\0\1\u0109"+
    "\25\0\1\u010d\22\0\1\u010e\4\0\1\u010d\10\0\1\u010e"+
    "\34\0\1\u010f\24\0\1\u0110\3\0\1\u0111\17\0\1\u0110"+
    "\45\0\1\u0112\24\0\1\u0113\17\0\1\u0113\3\0\1\u0112"+
    "\36\0\1\u0114\110\0\1\u0115\6\0\1\u0116\27\0\1\u0116"+
    "\63\0\1\u0117\27\0\1\u0117\62\0\1\u0118\26\0\1\u0118"+
    "\40\0\1\u0119\30\0\1\u011a\64\0\1\u011b\127\0\1\u011c"+
    "\110\0\1\u011d\70\0\1\u011e\51\0\1\u011e\30\0\1\u011f"+
    "\65\0\1\u011f\41\0\1\u0120\27\0\1\u0120\60\0\1\u0121"+
    "\27\0\1\u0121\71\0\1\u0122\23\0\1\u0122\43\0\1\u0123"+
    "\5\0\1\u0124\27\0\1\u0124\70\0\1\352\6\0\1\230"+
    "\26\0\1\352\1\0\1\230\24\0\1\62\16\0\1\347"+
    "\22\0\5\62\1\347\2\62\3\0\10\62\1\0\5\62"+
    "\4\0\1\62\11\0\1\62\16\0\1\350\22\0\5\62"+
    "\1\350\2\62\3\0\10\62\1\0\5\62\4\0\1\62"+
    "\11\0\1\62\23\0\1\352\6\0\1\230\6\0\5\62"+
    "\1\0\2\62\3\0\5\62\1\u0125\1\62\1\265\1\0"+
    "\5\62\4\0\1\62\20\0\1\u0126\50\0\1\u0126\36\0"+
    "\1\u0127\117\0\1\u0128\27\0\1\u0128\37\0\1\272\32\0"+
    "\1\u0129\12\0\1\272\10\0\1\u0129\2\0\1\272\7\0"+
    "\5\272\4\0\1\272\5\0\1\272\45\0\1\272\13\0"+
    "\1\272\7\0\5\272\4\0\1\272\25\0\1\u012a\27\0"+
    "\1\u012a\52\0\1\u012b\106\0\1\371\105\0\1\u012c\30\0"+
    "\1\u012d\142\0\1\u012e\32\0\1\u012f\121\0\1\u0130\27\0"+
    "\1\u0130\35\0\1\u0131\1\u0132\2\0\1\u0132\3\0\1\u0132"+
    "\35\0\1\u0131\13\0\1\u0131\7\0\5\u0131\4\0\1\u0131"+
    "\16\0\1\u0133\51\0\1\u0133\65\0\1\u0134\17\0\1\u0134"+
    "\54\0\1\u0135\27\0\1\u0135\41\0\1\u0136\24\0\1\u0137"+
    "\3\0\1\u0138\17\0\1\u0137\37\0\1\u0139\127\0\1\u013a"+
    "\27\0\1\u013a\54\0\1\u013b\27\0\1\u013b\144\0\1\u013c"+
    "\31\0\1\u013d\16\0\1\u013d\72\0\1\u013e\26\0\1\u013e"+
    "\43\0\1\100\124\0\1\u013f\27\0\1\u013f\47\0\1\u0140"+
    "\50\0\1\u0140\55\0\1\u0141\62\0\1\u0142\1\0\1\u0143"+
    "\21\0\1\u0144\6\0\1\u0145\2\0\1\u0146\23\0\1\u0144"+
    "\3\0\1\u0142\10\0\1\u0146\40\0\1\u0147\23\0\1\u0147"+
    "\54\0\1\u0148\27\0\1\u0148\72\0\1\u0149\10\0\1\u0149"+
    "\64\0\1\u014a\27\0\1\u014a\71\0\1\u014b\23\0\1\u014b"+
    "\61\0\1\u014c\35\0\1\u014c\46\0\1\u014d\27\0\1\u014d"+
    "\42\0\1\u014e\26\0\1\u014f\1\0\1\u0150\6\0\1\u014f"+
    "\65\0\1\u0151\27\0\1\u0151\51\0\1\u0152\13\0\1\u0153"+
    "\12\0\1\u0154\21\0\1\u0152\1\u0153\47\0\1\u0155\27\0"+
    "\1\u0155\41\0\1\u0156\30\0\1\u0157\102\0\1\u0158\35\0"+
    "\1\u0158\46\0\1\u0159\27\0\1\u0159\61\0\1\u015a\16\0"+
    "\1\u015a\51\0\1\u015b\30\0\1\u015c\77\0\1\u015d\16\0"+
    "\1\u015d\51\0\1\u015e\30\0\1\u015f\103\0\1\u0160\57\0"+
    "\4\u0161\1\0\1\u0161\1\0\6\u0161\3\0\60\u0161\2\0"+
    "\2\u0161\27\0\1\u013f\27\0\1\u013f\36\0\4\u0162\1\0"+
    "\1\u0163\1\0\6\u0162\3\0\60\u0162\2\0\2\u0162\21\0"+
    "\1\u0164\101\0\1\u0165\30\0\1\u0166\52\0\4\u0167\1\0"+
    "\1\u0167\1\0\6\u0167\3\0\60\u0167\2\0\2\u0167\10\0"+
    "\1\u0168\1\0\1\u0169\30\0\1\u016a\32\0\1\u0168\17\0"+
    "\4\u016b\1\0\1\u016c\1\0\6\u016b\3\0\60\u016b\2\0"+
    "\2\u016b\36\0\1\u016d\77\0\1\u016e\27\0\1\u016e\61\0"+
    "\1\u016f\27\0\1\u016f\47\0\1\u0170\110\0\1\u0171\13\0"+
    "\1\u0172\27\0\1\u0172\41\0\1\u0173\30\0\1\u0174\73\0"+
    "\1\u0175\27\0\1\u0175\42\0\1\u0176\65\0\1\u0176\45\0"+
    "\1\u0177\26\0\1\u0177\60\0\1\u0178\16\0\1\u0178\70\0"+
    "\1\u0179\27\0\1\u0179\55\0\1\u017a\27\0\1\u017a\37\0"+
    "\4\u017b\1\0\1\u017b\1\0\6\u017b\3\0\60\u017b\2\0"+
    "\2\u017b\5\0\4\u017c\1\0\1\u017d\1\0\6\u017c\3\0"+
    "\60\u017c\2\0\2\u017c\16\0\1\u017e\51\0\1\u017e\66\0"+
    "\1\u017f\40\0\1\u017f\22\0\1\u0180\7\0\1\u0181\27\0"+
    "\1\u0181\63\0\1\u0182\2\0\1\u0183\23\0\1\u0183\6\0"+
    "\1\u0182\35\0\1\u0184\101\0\1\u0185\65\0\1\u0185\57\0"+
    "\1\u0186\17\0\1\u0186\30\0\1\u0109\4\0\1\u0187\30\0"+
    "\1\u0188\7\0\1\u0109\13\0\1\u0109\7\0\5\u0109\4\0"+
    "\1\u0109\5\0\1\u0109\45\0\1\u0109\13\0\1\u0109\7\0"+
    "\5\u0109\4\0\1\u0109\5\0\1\u0109\4\0\1\u0189\30\0"+
    "\1\u018a\7\0\1\u0109\13\0\1\u0109\7\0\5\u0109\4\0"+
    "\1\u0109\5\0\1\u0109\4\0\1\u018b\12\0\1\u018c\15\0"+
    "\1\u0188\7\0\1\u0109\1\0\1\u018c\11\0\1\u0109\7\0"+
    "\5\u0109\4\0\1\u0109\25\0\1\u018d\27\0\1\u018d\43\0"+
    "\1\u018e\65\0\1\u018e\17\0\4\u018f\1\0\1\u018f\1\0"+
    "\6\u018f\3\0\60\u018f\2\0\2\u018f\26\0\1\u0190\27\0"+
    "\1\u0190\37\0\4\u0191\1\0\1\u0192\1\0\6\u0191\3\0"+
    "\60\u0191\2\0\2\u0191\37\0\1\u0193\23\0\1\u0193\35\0"+
    "\1\u0148\65\0\1\u0148\32\0\1\u0194\50\0\1\u0194\51\0"+
    "\1\u0195\16\0\1\u0195\64\0\1\u0196\27\0\1\u0196\45\0"+
    "\1\u0197\30\0\1\u0198\52\0\4\u0199\1\0\1\u0199\1\0"+
    "\6\u0199\3\0\60\u0199\2\0\2\u0199\5\0\4\u019a\1\0"+
    "\1\u019b\1\0\6\u019a\3\0\60\u019a\2\0\2\u019a\27\0"+
    "\1\u019c\27\0\1\u019c\43\0\1\u019d\30\0\1\u019e\106\0"+
    "\1\u019f\10\0\1\u019f\72\0\1\u01a0\35\0\1\u01a0\30\0"+
    "\1\u01a1\21\0\1\u01a2\6\0\1\u01a3\26\0\1\u01a2\44\0"+
    "\1\u01a4\27\0\1\u01a4\70\0\1\u01a5\62\0\1\u013f\14\0"+
    "\1\u01a6\27\0\1\u01a6\20\0\1\u013f\46\0\1\u01a7\35\0"+
    "\1\u01a7\26\0\1\u01a8\65\0\1\u01a8\32\0\1\u01a9\50\0"+
    "\1\u01a9\32\0\1\u01aa\203\0\1\u01ab\21\0\1\u01ac\101\0"+
    "\1\u01ad\65\0\1\u01ad\17\0\4\u01ae\1\0\1\u01ae\1\0"+
    "\6\u01ae\3\0\60\u01ae\2\0\2\u01ae\5\0\4\u01af\1\0"+
    "\1\u01b0\1\0\6\u01af\3\0\60\u01af\2\0\2\u01af\25\0"+
    "\1\u01b1\27\0\1\u01b1\40\0\1\u0131\32\0\1\u01b2\12\0"+
    "\1\u0131\10\0\1\u01b2\2\0\1\u0131\7\0\5\u0131\4\0"+
    "\1\u0131\5\0\1\u0131\45\0\1\u0131\13\0\1\u0131\7\0"+
    "\5\u0131\4\0\1\u0131\5\0\1\u01b3\115\0\1\u01b4\30\0"+
    "\1\u01b5\105\0\1\u01b6\23\0\1\u01b6\31\0\4\u01b7\1\0"+
    "\1\u01b7\1\0\6\u01b7\3\0\60\u01b7\2\0\2\u01b7\30\0"+
    "\1\u01b8\27\0\1\u01b8\35\0\4\u01b9\1\0\1\u01ba\1\0"+
    "\6\u01b9\3\0\60\u01b9\2\0\2\u01b9\5\0\1\u01bb\1\u01bc"+
    "\2\0\1\u01bc\3\0\1\u01bc\35\0\1\u01bb\13\0\1\u01bb"+
    "\7\0\5\u01bb\4\0\1\u01bb\12\0\1\u01bd\30\0\1\u01be"+
    "\74\0\1\u01bf\27\0\1\u01bf\41\0\1\u01c0\65\0\1\u01c0"+
    "\37\0\1\u01c1\27\0\1\u01c1\51\0\1\u01c2\51\0\1\u01c2"+
    "\32\0\1\u01c3\30\0\1\u01c4\104\0\1\u013f\23\0\1\u013f"+
    "\32\0\4\u01c5\1\0\1\u01c5\1\0\6\u01c5\3\0\60\u01c5"+
    "\2\0\2\u01c5\42\0\1\u0146\2\0\1\u01c6\17\0\1\u01c6"+
    "\6\0\1\u0146\21\0\4\u01c7\1\0\1\u01c8\1\0\6\u01c7"+
    "\3\0\60\u01c7\2\0\2\u01c7\34\0\1\u013f\35\0\1\u013f"+
    "\26\0\1\u01c9\65\0\1\u01c9\22\0\1\u01ca\65\0\1\u01ca"+
    "\55\0\1\u01cb\104\0\1\u01cc\23\0\1\u01cc\62\0\1\u01cd"+
    "\35\0\1\u01cd\47\0\1\u01ce\16\0\1\u01ce\44\0\4\u01cf"+
    "\1\0\1\u01cf\1\0\6\u01cf\3\0\60\u01cf\2\0\2\u01cf"+
    "\12\0\1\u014e\30\0\1\u0150\52\0\4\u01d0\1\0\1\u01d1"+
    "\1\0\6\u01d0\3\0\60\u01d0\2\0\2\u01d0\37\0\1\u01d2"+
    "\23\0\1\u01d2\52\0\1\u01d3\27\0\1\u01d3\54\0\1\u01d4"+
    "\120\0\1\u01d5\27\0\1\u01d5\61\0\1\u013f\16\0\1\u013f"+
    "\44\0\4\u01d6\1\0\1\u01d6\1\0\6\u01d6\3\0\60\u01d6"+
    "\2\0\2\u01d6\5\0\4\u01d7\1\0\1\u01d8\1\0\6\u01d7"+
    "\3\0\60\u01d7\2\0\2\u01d7\17\0\1\u01d9\123\0\1\u01da"+
    "\16\0\1\u01da\67\0\1\u01db\27\0\1\u01db\35\0\4\u01dc"+
    "\1\0\1\u01dc\1\0\6\u01dc\3\0\60\u01dc\2\0\2\u01dc"+
    "\5\0\4\u01dd\1\0\1\u01de\1\0\6\u01dd\3\0\60\u01dd"+
    "\2\0\2\u01dd\34\0\1\u01df\35\0\1\u01df\23\0\4\u01e0"+
    "\1\0\1\u01e0\1\0\6\u01e0\3\0\60\u01e0\2\0\2\u01e0"+
    "\5\0\4\u01e1\1\0\1\u01e2\1\0\6\u01e1\3\0\60\u01e1"+
    "\2\0\2\u01e1\12\0\1\u01e3\30\0\1\u01e4\52\0\4\u0161"+
    "\1\0\1\u0161\1\353\1\u01e5\5\u0161\3\0\60\u0161\2\0"+
    "\2\u0161\5\0\4\u0162\1\0\1\u0162\1\0\6\u0162\3\0"+
    "\60\u0162\2\0\2\u0162\5\0\4\u01e6\1\0\1\u01e6\1\0"+
    "\6\u01e6\3\0\60\u01e6\2\0\2\u01e6\31\0\1\u01e7\27\0"+
    "\1\u01e7\34\0\4\u01e8\1\0\1\u01e8\1\0\6\u01e8\3\0"+
    "\60\u01e8\2\0\2\u01e8\5\0\4\u01e9\1\0\1\u01ea\1\0"+
    "\6\u01e9\3\0\60\u01e9\2\0\2\u01e9\5\0\4\u0167\1\0"+
    "\1\u0167\1\360\1\u01eb\5\u0167\3\0\60\u0167\2\0\2\u0167"+
    "\12\0\1\360\30\0\1\362\52\0\4\u01ec\1\0\1\u01ec"+
    "\1\0\6\u01ec\3\0\60\u01ec\2\0\2\u01ec\5\0\4\u01ed"+
    "\1\0\1\u01ee\1\0\6\u01ed\3\0\60\u01ed\2\0\2\u01ed"+
    "\5\0\4\u016b\1\0\1\u016b\1\0\6\u016b\3\0\60\u016b"+
    "\2\0\2\u016b\5\0\4\u01ef\1\0\1\u01ef\1\0\6\u01ef"+
    "\3\0\60\u01ef\2\0\2\u01ef\12\0\1\u01f0\30\0\1\u01f1"+
    "\101\0\1\u01f2\35\0\1\u01f2\33\0\1\u01f3\100\0\1\u01f4"+
    "\1\u01f5\2\0\1\u01f5\3\0\1\u01f5\35\0\1\u01f4\13\0"+
    "\1\u01f4\7\0\5\u01f4\4\0\1\u01f4\5\0\4\u01f6\1\0"+
    "\1\u01f6\1\0\6\u01f6\3\0\60\u01f6\2\0\2\u01f6\50\0"+
    "\1\u01f7\15\0\1\u01f7\27\0\4\u01f8\1\0\1\u01f8\1\0"+
    "\6\u01f8\3\0\60\u01f8\2\0\2\u01f8\5\0\4\u01f9\1\0"+
    "\1\u01fa\1\0\6\u01f9\3\0\60\u01f9\2\0\2\u01f9\44\0"+
    "\1\u01fb\30\0\1\u01fb\25\0\1\u01fc\2\0\1\354\25\0"+
    "\1\u01fd\75\0\1\u01fe\27\0\1\u01fe\70\0\1\u01ff\23\0"+
    "\1\u01ff\34\0\1\u01c9\1\0\1\u0200\30\0\1\u0201\32\0"+
    "\1\u01c9\30\0\1\u0202\51\0\1\u0202\25\0\4\u017b\1\0"+
    "\1\u017b\1\377\1\u0203\5\u017b\3\0\60\u017b\2\0\2\u017b"+
    "\5\0\4\u017c\1\0\1\u017c\1\0\6\u017c\3\0\60\u017c"+
    "\2\0\2\u017c\5\0\4\u0204\1\0\1\u0204\1\0\6\u0204"+
    "\3\0\60\u0204\2\0\2\u0204\10\0\1\u0205\65\0\1\u0205"+
    "\24\0\1\u0206\30\0\1\u0207\101\0\1\u0208\35\0\1\u0208"+
    "\47\0\1\u0209\27\0\1\u0209\63\0\1\u020a\35\0\1\u020a"+
    "\66\0\1\u020b\15\0\1\u020b\67\0\1\u020c\17\0\1\u020c"+
    "\35\0\1\u020d\30\0\1\u020e\52\0\4\u020f\1\0\1\u020f"+
    "\1\0\6\u020f\3\0\60\u020f\2\0\2\u020f\5\0\4\u0210"+
    "\1\0\1\u0211\1\0\6\u0210\3\0\60\u0210\2\0\2\u0210"+
    "\5\0\4\u0212\1\0\1\u0212\1\0\6\u0212\3\0\60\u0212"+
    "\2\0\2\u0212\5\0\4\u0213\1\0\1\u0214\1\0\6\u0213"+
    "\3\0\60\u0213\2\0\2\u0213\5\0\3\u020f\1\u0215\1\0"+
    "\1\u020f\1\0\6\u020f\3\0\1\u0216\27\u020f\1\u0216\20\u020f"+
    "\1\u0215\6\u020f\2\0\2\u020f\10\0\1\u0217\65\0\1\u0217"+
    "\42\0\1\u0218\27\0\1\u0218\47\0\1\u0219\76\0\4\u018f"+
    "\1\0\1\u018f\1\u010f\1\u021a\5\u018f\3\0\60\u018f\2\0"+
    "\2\u018f\5\0\1\u021b\110\0\4\u0191\1\0\1\u0191\1\0"+
    "\6\u0191\3\0\60\u0191\2\0\2\u0191\5\0\4\u021c\1\0"+
    "\1\u021c\1\0\6\u021c\3\0\60\u021c\2\0\2\u021c\12\0"+
    "\1\u021d\30\0\1\u021e\73\0\1\u021f\27\0\1\u021f\51\0"+
    "\1\u0220\116\0\1\u0221\27\0\1\u0221\40\0\4\u0222\1\0"+
    "\1\u0222\1\0\6\u0222\3\0\60\u0222\2\0\2\u0222\5\0"+
    "\4\u0223\1\0\1\u0224\1\0\6\u0223\3\0\60\u0223\2\0"+
    "\2\u0223\5\0\4\u0199\1\0\1\u0199\1\u0119\1\u0225\5\u0199"+
    "\3\0\60\u0199\2\0\2\u0199\5\0\4\u019a\1\0\1\u019a"+
    "\1\0\6\u019a\3\0\60\u019a\2\0\2\u019a\5\0\4\u0226"+
    "\1\0\1\u0226\1\0\6\u0226\3\0\60\u0226\2\0\2\u0226"+
    "\25\0\1\u0227\27\0\1\u0227\40\0\4\u0228\1\0\1\u0228"+
    "\1\0\6\u0228\3\0\60\u0228\2\0\2\u0228\5\0\4\u0229"+
    "\1\0\1\u022a\1\0\6\u0229\3\0\60\u0229\2\0\2\u0229"+
    "\37\0\1\u022b\23\0\1\u022b\72\0\1\u022c\17\0\1\u022c"+
    "\30\0\4\u022d\1\0\1\u022d\1\0\6\u022d\3\0\60\u022d"+
    "\2\0\2\u022d\42\0\1\u022e\31\0\1\u022e\21\0\4\u022f"+
    "\1\0\1\u0230\1\0\6\u022f\3\0\3\u022f\1\u0231\27\u022f"+
    "\1\u0231\24\u022f\2\0\2\u022f\41\0\1\u0232\10\0\1\u0232"+
    "\50\0\1\u0233\30\0\1\u0234\55\0\1\u0235\65\0\1\u0235"+
    "\50\0\1\u013f\117\0\1\u0236\17\0\1\u0236\44\0\1\u0237"+
    "\175\0\1\u0238\31\0\1\u0239\27\0\1\u0239\50\0\1\u023a"+
    "\76\0\4\u01ae\1\0\1\u01ae\1\u012c\1\u023b\5\u01ae\3\0"+
    "\60\u01ae\2\0\2\u01ae\5\0\4\u01af\1\0\1\u01af\1\0"+
    "\6\u01af\3\0\60\u01af\2\0\2\u01af\5\0\4\u023c\1\0"+
    "\1\u023c\1\0\6\u023c\3\0\60\u023c\2\0\2\u023c\10\0"+
    "\1\u023d\65\0\1\u023d\120\0\1\u023e\12\0\1\u023f\26\0"+
    "\1\u0240\23\0\1\u0240\12\0\1\u023f\17\0\4\u0241\1\0"+
    "\1\u0241\1\0\6\u0241\3\0\60\u0241\2\0\2\u0241\5\0"+
    "\4\u0242\1\0\1\u0243\1\0\6\u0242\3\0\60\u0242\2\0"+
    "\2\u0242\32\0\1\u0244\16\0\1\u0244\44\0\4\u01b7\1\0"+
    "\1\u01b7\1\u0136\1\u0245\5\u01b7\3\0\60\u01b7\2\0\2\u01b7"+
    "\50\0\1\u0246\15\0\1\u0246\27\0\4\u01b9\1\0\1\u01b9"+
    "\1\0\6\u01b9\3\0\60\u01b9\2\0\2\u01b9\5\0\4\u0247"+
    "\1\0\1\u0247\1\0\6\u0247\3\0\60\u0247\2\0\2\u0247"+
    "\5\0\1\u01bb\45\0\1\u01bb\13\0\1\u01bb\7\0\5\u01bb"+
    "\1\0\1\u0248\2\0\1\u01bb\5\0\1\u01bb\45\0\1\u01bb"+
    "\13\0\1\u01bb\7\0\5\u01bb\4\0\1\u01bb\5\0\4\u0249"+
    "\1\0\1\u0249\1\0\6\u0249\3\0\60\u0249\2\0\2\u0249"+
    "\5\0\4\u024a\1\0\1\u024b\1\0\6\u024a\3\0\60\u024a"+
    "\2\0\2\u024a\10\0\1\u024c\65\0\1\u024c\122\0\1\u024d"+
    "\31\0\1\u024e\27\0\1\u024e\60\0\1\u024f\27\0\1\u024f"+
    "\34\0\4\u0250\1\0\1\u0250\1\0\6\u0250\3\0\60\u0250"+
    "\2\0\2\u0250\5\0\4\u0251\1\0\1\u0252\1\0\6\u0251"+
    "\3\0\60\u0251\2\0\2\u0251\5\0\4\u01c5\1\0\1\u01c5"+
    "\1\u0143\1\u0253\5\u01c5\3\0\60\u01c5\2\0\2\u01c5\20\0"+
    "\1\u013f\50\0\1\u013f\24\0\4\u01c7\1\0\1\u01c7\1\0"+
    "\6\u01c7\3\0\60\u01c7\2\0\2\u01c7\5\0\4\u0254\1\0"+
    "\1\u0254\1\0\6\u0254\3\0\60\u0254\2\0\2\u0254\31\0"+
    "\1\u0255\27\0\1\u0255\74\0\1\u0256\17\0\1\u0256\63\0"+
    "\1\u0257\23\0\1\u0257\36\0\1\u0258\30\0\1\u0259\57\0"+
    "\1\u025a\30\0\1\u025b\52\0\4\u01cf\1\0\1\u01cf\1\u014e"+
    "\1\u025c\5\u01cf\3\0\60\u01cf\2\0\2\u01cf\5\0\4\u01d0"+
    "\1\0\1\u01d0\1\0\6\u01d0\3\0\60\u01d0\2\0\2\u01d0"+
    "\5\0\4\u025d\1\0\1\u025d\1\0\6\u025d\3\0\60\u025d"+
    "\2\0\2\u025d\45\0\1\u025e\17\0\1\u025e\61\0\1\u025f"+
    "\71\0\1\u0260\125\0\1\u0261\35\0\1\u0261\23\0\4\u01d6"+
    "\1\0\1\u01d6\1\u0156\1\u0262\5\u01d6\3\0\60\u01d6\2\0"+
    "\2\u01d6\5\0\4\u01d7\1\0\1\u01d7\1\0\6\u01d7\3\0"+
    "\60\u01d7\2\0\2\u01d7\5\0\4\u0263\1\0\1\u0263\1\0"+
    "\6\u0263\3\0\60\u0263\2\0\2\u0263\44\0\1\u0264\30\0"+
    "\1\u0264\46\0\1\u0265\26\0\1\u0265\33\0\4\u01dc\1\0"+
    "\1\u01dc\1\u015b\1\u0266\5\u01dc\3\0\60\u01dc\2\0\2\u01dc"+
    "\5\0\4\u01dd\1\0\1\u01dd\1\0\6\u01dd\3\0\60\u01dd"+
    "\2\0\2\u01dd\5\0\4\u0267\1\0\1\u0267\1\0\6\u0267"+
    "\3\0\60\u0267\2\0\2\u0267\35\0\1\u0268\35\0\1\u0268"+
    "\22\0\4\u01e0\1\0\1\u01e0\1\u015e\1\u0269\5\u01e0\3\0"+
    "\60\u01e0\2\0\2\u01e0\5\0\4\u01e1\1\0\1\u01e1\1\0"+
    "\6\u01e1\3\0\60\u01e1\2\0\2\u01e1\5\0\4\u026a\1\0"+
    "\1\u026a\1\0\6\u026a\3\0\60\u026a\2\0\2\u026a\5\0"+
    "\4\u026b\1\0\1\u026b\1\0\6\u026b\3\0\60\u026b\2\0"+
    "\2\u026b\5\0\4\u026c\1\0\1\u026d\1\0\6\u026c\3\0"+
    "\60\u026c\2\0\2\u026c\5\0\4\u01e6\1\0\1\u01e6\1\353"+
    "\6\u01e6\3\0\60\u01e6\2\0\2\u01e6\35\0\1\u026e\35\0"+
    "\1\u026e\22\0\4\u01e8\1\0\1\u01e8\1\u0165\1\u026f\5\u01e8"+
    "\3\0\60\u01e8\2\0\2\u01e8\5\0\4\u01e9\1\0\1\u01e9"+
    "\1\0\6\u01e9\3\0\60\u01e9\2\0\2\u01e9\5\0\4\u0270"+
    "\1\0\1\u0270\1\0\6\u0270\3\0\60\u0270\2\0\2\u0270"+
    "\5\0\4\u01ec\1\0\1\u01ec\1\u0169\1\u0271\5\u01ec\3\0"+
    "\60\u01ec\2\0\2\u01ec\5\0\4\u01ed\1\0\1\u01ed\1\0"+
    "\6\u01ed\3\0\60\u01ed\2\0\2\u01ed\5\0\4\u0272\1\0"+
    "\1\u0272\1\0\6\u0272\3\0\60\u0272\2\0\2\u0272\5\0"+
    "\4\u01ef\1\0\1\u01ef\1\360\6\u01ef\3\0\60\u01ef\2\0"+
    "\2\u01ef\5\0\4\u0273\1\0\1\u0273\1\0\6\u0273\3\0"+
    "\60\u0273\2\0\2\u0273\5\0\4\u0274\1\0\1\u0275\1\0"+
    "\6\u0274\3\0\60\u0274\2\0\2\u0274\36\0\1\u0276\73\0"+
    "\1\u0277\74\0\1\u01f4\32\0\1\u0278\12\0\1\u01f4\10\0"+
    "\1\u0278\2\0\1\u01f4\7\0\5\u01f4\4\0\1\u01f4\5\0"+
    "\1\u01f4\45\0\1\u01f4\13\0\1\u01f4\7\0\5\u01f4\4\0"+
    "\1\u01f4\27\0\1\u0279\27\0\1\u0279\36\0\4\u01f8\1\0"+
    "\1\u01f8\1\u0173\1\u027a\5\u01f8\3\0\60\u01f8\2\0\2\u01f8"+
    "\5\0\4\u01f9\1\0\1\u01f9\1\0\6\u01f9\3\0\60\u01f9"+
    "\2\0\2\u01f9\5\0\4\u027b\1\0\1\u027b\1\0\6\u027b"+
    "\3\0\60\u027b\2\0\2\u027b\53\0\1\u027c\3\0\1\u027c"+
    "\16\0\1\u027c\3\0\1\u027c\4\0\1\u027c\6\0\4\u027d"+
    "\1\0\1\u027d\1\0\6\u027d\3\0\60\u027d\2\0\2\u027d"+
    "\5\0\4\u027e\1\0\1\u027f\1\0\6\u027e\3\0\60\u027e"+
    "\2\0\2\u027e\25\0\1\u0280\27\0\1\u0280\64\0\1\u0281"+
    "\27\0\1\u0281\34\0\4\u0282\1\0\1\u0282\1\0\6\u0282"+
    "\3\0\60\u0282\2\0\2\u0282\5\0\3\u0283\1\u0284\1\0"+
    "\1\u0285\1\0\6\u0283\3\0\51\u0283\1\u0284\6\u0283\2\0"+
    "\2\u0283\31\0\1\u0286\27\0\1\u0286\34\0\4\u0204\1\0"+
    "\1\u0204\1\377\6\u0204\3\0\60\u0204\2\0\2\u0204\12\0"+
    "\1\u0287\30\0\1\u0288\52\0\4\u0289\1\0\1\u0289\1\0"+
    "\6\u0289\3\0\60\u0289\2\0\2\u0289\5\0\4\u028a\1\0"+
    "\1\u028b\1\0\6\u028a\3\0\60\u028a\2\0\2\u028a\21\0"+
    "\1\u0180\124\0\1\u028c\35\0\1\u028c\116\0\1\u028d\14\0"+
    "\4\u028e\1\0\1\u028e\1\0\6\u028e\3\0\60\u028e\2\0"+
    "\2\u028e\5\0\4\u028f\1\0\1\u0290\1\0\6\u028f\3\0"+
    "\60\u028f\2\0\2\u028f\5\0\4\u020f\1\0\1\u020f\1\u0187"+
    "\1\u0291\5\u020f\3\0\60\u020f\2\0\2\u020f\5\0\4\u0210"+
    "\1\0\1\u0210\1\0\6\u0210\3\0\60\u0210\2\0\2\u0210"+
    "\5\0\4\u0292\1\0\1\u0292\1\0\6\u0292\3\0\60\u0292"+
    "\2\0\2\u0292\5\0\4\u0212\1\0\1\u0212\1\u0189\1\u0293"+
    "\5\u0212\3\0\60\u0212\2\0\2\u0212\5\0\4\u0213\1\0"+
    "\1\u0213\1\0\6\u0213\3\0\60\u0213\2\0\2\u0213\5\0"+
    "\4\u0294\1\0\1\u0294\1\0\6\u0294\3\0\60\u0294\2\0"+
    "\2\u0294\5\0\4\u020f\1\0\1\u020f\1\u0187\1\u0291\5\u020f"+
    "\3\0\21\u020f\1\u0295\36\u020f\2\0\1\u0295\1\u020f\5\0"+
    "\3\u020f\1\u0296\1\0\1\u020f\1\u0187\1\u0291\5\u020f\3\0"+
    "\51\u020f\1\u0296\6\u020f\2\0\2\u020f\27\0\1\u0297\27\0"+
    "\1\u0297\71\0\1\u0298\23\0\1\u0298\51\0\1\u0299\27\0"+
    "\1\u0299\45\0\1\u029a\30\0\1\u029b\52\0\4\u021c\1\0"+
    "\1\u021c\1\u010f\6\u021c\3\0\60\u021c\2\0\2\u021c\5\0"+
    "\4\u029c\1\0\1\u029c\1\0\6\u029c\3\0\60\u029c\2\0"+
    "\2\u029c\5\0\4\u029d\1\0\1\u029e\1\0\6\u029d\3\0"+
    "\60\u029d\2\0\2\u029d\41\0\1\u029f\10\0\1\u029f\56\0"+
    "\1\u02a0\50\0\1\u02a0\31\0\1\u02a1\30\0\1\u02a2\52\0"+
    "\4\u0222\1\0\1\u0222\1\u0197\1\u02a3\5\u0222\3\0\60\u0222"+
    "\2\0\2\u0222\5\0\4\u0223\1\0\1\u0223\1\0\6\u0223"+
    "\3\0\60\u0223\2\0\2\u0223\5\0\4\u02a4\1\0\1\u02a4"+
    "\1\0\6\u02a4\3\0\60\u02a4\2\0\2\u02a4\5\0\4\u0226"+
    "\1\0\1\u0226\1\u0119\6\u0226\3\0\60\u0226\2\0\2\u0226"+
    "\12\0\1\u02a5\30\0\1\u02a6\52\0\4\u0228\1\0\1\u0228"+
    "\1\u019d\1\u02a7\5\u0228\3\0\60\u0228\2\0\2\u0228\5\0"+
    "\4\u0229\1\0\1\u0229\1\0\6\u0229\3\0\60\u0229\2\0"+
    "\2\u0229\5\0\4\u02a8\1\0\1\u02a8\1\0\6\u02a8\3\0"+
    "\60\u02a8\2\0\2\u02a8\31\0\1\u02a9\27\0\1\u02a9\47\0"+
    "\1\u02aa\50\0\1\u02aa\24\0\4\u022d\1\0\1\u022d\1\u01a1"+
    "\1\u02ab\5\u022d\3\0\60\u022d\2\0\2\u022d\34\0\1\u02ac"+
    "\35\0\1\u02ac\23\0\4\u022f\1\0\1\u022f\1\0\6\u022f"+
    "\3\0\60\u022f\2\0\2\u022f\5\0\4\u02ad\1\0\1\u02ad"+
    "\1\0\6\u02ad\3\0\60\u02ad\2\0\2\u02ad\5\0\3\u022f"+
    "\1\u02ae\1\0\1\u022f\1\0\6\u022f\3\0\51\u022f\1\u02ae"+
    "\6\u022f\2\0\2\u022f\27\0\1\u02af\27\0\1\u02af\36\0"+
    "\4\u02b0\1\0\1\u02b0\1\0\6\u02b0\3\0\60\u02b0\2\0"+
    "\2\u02b0\5\0\4\u02b1\1\0\1\u02b2\1\0\6\u02b1\3\0"+
    "\60\u02b1\2\0\2\u02b1\12\0\1\u02b3\2\0\1\354\25\0"+
    "\1\u02b4\57\0\1\u02b5\30\0\1\u02b6\52\0\1\u02b7\45\0"+
    "\1\u02b7\13\0\1\u02b7\7\0\5\u02b7\4\0\1\u02b7\42\0"+
    "\1\u02b8\31\0\1\u02b8\34\0\1\u02b9\50\0\1\u02b9\24\0"+
    "\4\u023c\1\0\1\u023c\1\u012c\6\u023c\3\0\60\u023c\2\0"+
    "\2\u023c\12\0\1\u02b3\30\0\1\u02b4\153\0\1\u02ba\106\0"+
    "\1\u02bb\37\0\1\u02bc\26\0\1\u02bc\33\0\4\u0241\1\0"+
    "\1\u0241\1\u01b4\1\u02bd\5\u0241\3\0\60\u0241\2\0\2\u0241"+
    "\5\0\4\u0242\1\0\1\u0242\1\0\6\u0242\3\0\60\u0242"+
    "\2\0\2\u0242\5\0\4\u02be\1\0\1\u02be\1\0\6\u02be"+
    "\3\0\60\u02be\2\0\2\u02be\30\0\1\u02bf\27\0\1\u02bf"+
    "\35\0\4\u0247\1\0\1\u0247\1\u0136\6\u0247\3\0\60\u0247"+
    "\2\0\2\u0247\5\0\1\u02c0\1\u02c1\2\0\1\u02c1\3\0"+
    "\1\u02c1\35\0\1\u02c0\13\0\1\u02c0\7\0\5\u02c0\4\0"+
    "\1\u02c0\5\0\4\u0249\1\0\1\u0249\1\u01bd\1\u02c2\5\u0249"+
    "\3\0\60\u0249\2\0\2\u0249\5\0\4\u024a\1\0\1\u024a"+
    "\1\0\6\u024a\3\0\60\u024a\2\0\2\u024a\5\0\4\u02c3"+
    "\1\0\1\u02c3\1\0\6\u02c3\3\0\60\u02c3\2\0\2\u02c3"+
    "\102\0\1\u02c4\20\0\1\u02c5\30\0\1\u02c6\52\0\4\u0250"+
    "\1\0\1\u0250\1\u01c3\1\u02c7\5\u0250\3\0\60\u0250\2\0"+
    "\2\u0250\5\0\4\u0251\1\0\1\u0251\1\0\6\u0251\3\0"+
    "\60\u0251\2\0\2\u0251\5\0\4\u02c8\1\0\1\u02c8\1\0"+
    "\6\u02c8\3\0\60\u02c8\2\0\2\u02c8\5\0\4\u0254\1\0"+
    "\1\u0254\1\u0143\6\u0254\3\0\60\u0254\2\0\2\u0254\20\0"+
    "\1\u02c9\50\0\1\u02c9\51\0\1\u02ca\16\0\1\u02ca\44\0"+
    "\4\u02cb\1\0\1\u02cb\1\0\6\u02cb\3\0\60\u02cb\2\0"+
    "\2\u02cb\5\0\4\u02cc\1\0\1\u02cd\1\0\6\u02cc\3\0"+
    "\60\u02cc\2\0\2\u02cc\5\0\4\u02ce\1\0\1\u02ce\1\0"+
    "\6\u02ce\3\0\60\u02ce\2\0\2\u02ce\5\0\4\u02cf\1\0"+
    "\1\u02d0\1\0\6\u02cf\3\0\60\u02cf\2\0\2\u02cf\5\0"+
    "\4\u025d\1\0\1\u025d\1\u014e\6\u025d\3\0\60\u025d\2\0"+
    "\2\u025d\45\0\1\u02d1\17\0\1\u02d1\70\0\1\u02d2\17\0"+
    "\1\u02d2\52\0\1\u02d3\27\0\1\u02d3\36\0\4\u0263\1\0"+
    "\1\u0263\1\u0156\6\u0263\3\0\60\u0263\2\0\2\u0263\31\0"+
    "\1\u02d4\27\0\1\u02d4\57\0\1\u02d5\27\0\1\u02d5\35\0"+
    "\4\u0267\1\0\1\u0267\1\u015b\6\u0267\3\0\60\u0267\2\0"+
    "\2\u0267\17\0\1\u02d6\76\0\4\u026a\1\0\1\u026a\1\u015e"+
    "\6\u026a\3\0\60\u026a\2\0\2\u026a\5\0\4\u026b\1\0"+
    "\1\u026b\1\u01e3\1\u02d7\5\u026b\3\0\60\u026b\2\0\2\u026b"+
    "\5\0\4\u026c\1\0\1\u026c\1\0\6\u026c\3\0\60\u026c"+
    "\2\0\2\u026c\5\0\4\u02d8\1\0\1\u02d8\1\0\6\u02d8"+
    "\3\0\60\u02d8\2\0\2\u02d8\30\0\1\u02d9\27\0\1\u02d9"+
    "\35\0\4\u0270\1\0\1\u0270\1\u0165\6\u0270\3\0\60\u0270"+
    "\2\0\2\u0270\5\0\4\u0272\1\0\1\u0272\1\u0169\6\u0272"+
    "\3\0\60\u0272\2\0\2\u0272\5\0\4\u0273\1\0\1\u0273"+
    "\1\u01f0\1\u02da\5\u0273\3\0\60\u0273\2\0\2\u0273\5\0"+
    "\4\u0274\1\0\1\u0274\1\0\6\u0274\3\0\60\u0274\2\0"+
    "\2\u0274\5\0\4\u02db\1\0\1\u02db\1\0\6\u02db\3\0"+
    "\60\u02db\2\0\2\u02db\12\0\1\u02dc\30\0\1\u02dd\64\0"+
    "\1\u02de\177\0\1\u02df\34\0\1\u02e0\16\0\1\u02e0\44\0"+
    "\4\u027b\1\0\1\u027b\1\u0173\6\u027b\3\0\60\u027b\2\0"+
    "\2\u027b\104\0\1\u02e1\11\0\4\u027d\1\0\1\u027d\1\u01fc"+
    "\1\u02e2\5\u027d\3\0\60\u027d\2\0\2\u027d\5\0\4\u027e"+
    "\1\0\1\u027e\1\0\6\u027e\3\0\60\u027e\2\0\2\u027e"+
    "\5\0\4\u02e3\1\0\1\u02e3\1\0\6\u02e3\3\0\60\u02e3"+
    "\2\0\2\u02e3\17\0\1\u02e4\103\0\1\u02e5\30\0\1\u02e6"+
    "\52\0\4\u0282\1\0\1\u0282\1\u0200\1\u02e7\5\u0282\3\0"+
    "\60\u0282\2\0\2\u0282\5\0\4\u0283\1\0\1\u0283\1\0"+
    "\6\u0283\3\0\60\u0283\2\0\2\u0283\5\0\4\u0283\1\0"+
    "\1\u0283\1\0\3\u0283\1\u02e8\2\u0283\3\0\60\u0283\2\0"+
    "\2\u0283\5\0\4\u02e9\1\0\1\u02e9\1\0\6\u02e9\3\0"+
    "\60\u02e9\2\0\2\u02e9\50\0\1\u02ea\15\0\1\u02ea\27\0"+
    "\4\u02eb\1\0\1\u02eb\1\0\6\u02eb\3\0\60\u02eb\2\0"+
    "\2\u02eb\5\0\4\u02ec\1\0\1\u02ed\1\0\6\u02ec\3\0"+
    "\60\u02ec\2\0\2\u02ec\5\0\4\u0289\1\0\1\u0289\1\u0206"+
    "\1\u02ee\5\u0289\3\0\60\u0289\2\0\2\u0289\5\0\4\u028a"+
    "\1\0\1\u028a\1\0\6\u028a\3\0\60\u028a\2\0\2\u028a"+
    "\5\0\4\u02ef\1\0\1\u02ef\1\0\6\u02ef\3\0\60\u02ef"+
    "\2\0\2\u02ef\31\0\1\u0181\27\0\1\u0181\41\0\1\u02f0"+
    "\30\0\1\u02f1\52\0\4\u028e\1\0\1\u028e\1\u020d\1\u02f2"+
    "\5\u028e\3\0\60\u028e\2\0\2\u028e\5\0\4\u028f\1\0"+
    "\1\u028f\1\0\6\u028f\3\0\60\u028f\2\0\2\u028f\5\0"+
    "\4\u02f3\1\0\1\u02f3\1\0\6\u02f3\3\0\60\u02f3\2\0"+
    "\2\u02f3\5\0\4\u0292\1\0\1\u0292\1\u0187\6\u0292\3\0"+
    "\60\u0292\2\0\2\u0292\5\0\4\u0294\1\0\1\u0294\1\u0189"+
    "\6\u0294\3\0\60\u0294\2\0\2\u0294\5\0\4\u020f\1\0"+
    "\1\u020f\1\u0187\1\u02f4\5\u020f\3\0\60\u020f\2\0\2\u020f"+
    "\5\0\4\u020f\1\0\1\u020f\1\u0187\1\u02f4\5\u020f\3\0"+
    "\2\u020f\1\u0215\16\u020f\1\u0295\10\u020f\1\u0215\25\u020f\2\0"+
    "\1\u0295\1\u020f\46\0\1\u02f5\40\0\1\u02f5\32\0\1\u02f6"+
    "\27\0\1\u02f6\50\0\1\u02f7\74\0\4\u02f8\1\0\1\u02f8"+
    "\1\0\6\u02f8\3\0\60\u02f8\2\0\2\u02f8\5\0\4\u02f9"+
    "\1\0\1\u02fa\1\0\6\u02f9\3\0\60\u02f9\2\0\2\u02f9"+
    "\5\0\4\u029c\1\0\1\u029c\1\u021d\1\u02fb\5\u029c\3\0"+
    "\60\u029c\2\0\2\u029c\5\0\4\u029d\1\0\1\u029d\1\0"+
    "\6\u029d\3\0\60\u029d\2\0\2\u029d\5\0\4\u02fc\1\0"+
    "\1\u02fc\1\0\6\u02fc\3\0\60\u02fc\2\0\2\u02fc\27\0"+
    "\1\u02fd\27\0\1\u02fd\60\0\1\u02fe\27\0\1\u02fe\36\0"+
    "\4\u02ff\1\0\1\u02ff\1\0\6\u02ff\3\0\60\u02ff\2\0"+
    "\2\u02ff\5\0\4\u0300\1\0\1\u0301\1\0\6\u0300\3\0"+
    "\5\u0300\1\u0302\16\u0300\1\u0302\33\u0300\2\0\2\u0300\5\0"+
    "\4\u02a4\1\0\1\u02a4\1\u0197\6\u02a4\3\0\60\u02a4\2\0"+
    "\2\u02a4\5\0\4\u0303\1\0\1\u0303\1\0\6\u0303\3\0"+
    "\60\u0303\2\0\2\u0303\5\0\4\u0304\1\0\1\u0305\1\0"+
    "\6\u0304\3\0\60\u0304\2\0\2\u0304\5\0\4\u02a8\1\0"+
    "\1\u02a8\1\u019d\6\u02a8\3\0\60\u02a8\2\0\2\u02a8\25\0"+
    "\1\u0306\27\0\1\u0306\76\0\1\u013f\52\0\4\u02ad\1\0"+
    "\1\u02ad\1\u01a1\6\u02ad\3\0\60\u02ad\2\0\2\u02ad\5\0"+
    "\3\u022f\1\u0307\1\0\1\u022f\1\0\6\u022f\3\0\51\u022f"+
    "\1\u0307\6\u022f\2\0\2\u022f\12\0\1\u0308\30\0\1\u0309"+
    "\52\0\4\u02b0\1\0\1\u02b0\1\u0233\1\u030a\5\u02b0\3\0"+
    "\60\u02b0\2\0\2\u02b0\5\0\4\u02b1\1\0\1\u02b1\1\0"+
    "\6\u02b1\3\0\60\u02b1\2\0\2\u02b1\5\0\4\u030b\1\0"+
    "\1\u030b\1\0\6\u030b\3\0\60\u030b\2\0\2\u030b\5\0"+
    "\4\u030c\1\0\1\u030c\1\0\6\u030c\3\0\2\u030c\1\u030d"+
    "\27\u030c\1\u030d\25\u030c\2\0\2\u030c\5\0\4\u030e\1\0"+
    "\1\u030f\1\0\6\u030e\3\0\60\u030e\2\0\2\u030e\5\0"+
    "\4\u0310\1\0\1\u0310\1\0\6\u0310\3\0\60\u0310\2\0"+
    "\2\u0310\5\0\4\u0311\1\0\1\u0312\1\0\6\u0311\3\0"+
    "\60\u0311\2\0\2\u0311\15\0\1\u0313\105\0\1\u0314\30\0"+
    "\1\u0315\105\0\1\u0316\23\0\1\u0316\31\0\4\u02be\1\0"+
    "\1\u02be\1\u01b4\6\u02be\3\0\60\u02be\2\0\2\u02be\16\0"+
    "\1\u0317\51\0\1\u0317\25\0\1\u02c0\35\0\1\u0318\7\0"+
    "\1\u02c0\13\0\1\u02c0\7\0\5\u02c0\4\0\1\u02c0\5\0"+
    "\1\u02c0\45\0\1\u02c0\13\0\1\u02c0\7\0\5\u02c0\4\0"+
    "\1\u02c0\5\0\4\u02c3\1\0\1\u02c3\1\u01bd\6\u02c3\3\0"+
    "\60\u02c3\2\0\2\u02c3\75\0\1\u0319\20\0\4\u031a\1\0"+
    "\1\u031a\1\0\6\u031a\3\0\60\u031a\2\0\2\u031a\5\0"+
    "\4\u031b\1\0\1\u031c\1\0\6\u031b\3\0\60\u031b\2\0"+
    "\2\u031b\5\0\4\u02c8\1\0\1\u02c8\1\u01c3\6\u02c8\3\0"+
    "\60\u02c8\2\0\2\u02c8\25\0\1\u031d\27\0\1\u031d\52\0"+
    "\1\u031e\76\0\4\u02cb\1\0\1\u02cb\1\u0258\1\u031f\5\u02cb"+
    "\3\0\60\u02cb\2\0\2\u02cb\5\0\4\u02cc\1\0\1\u02cc"+
    "\1\0\6\u02cc\3\0\60\u02cc\2\0\2\u02cc\5\0\4\u0320"+
    "\1\0\1\u0320\1\0\6\u0320\3\0\60\u0320\2\0\2\u0320"+
    "\5\0\4\u02ce\1\0\1\u02ce\1\u025a\1\u0321\5\u02ce\3\0"+
    "\60\u02ce\2\0\2\u02ce\5\0\4\u02cf\1\0\1\u02cf\1\0"+
    "\6\u02cf\3\0\60\u02cf\2\0\2\u02cf\5\0\4\u0322\1\0"+
    "\1\u0322\1\0\6\u0322\3\0\60\u0322\2\0\2\u0322\32\0"+
    "\1\u0323\16\0\1\u0323\104\0\1\u0324\17\0\1\u0324\50\0"+
    "\1\u0325\27\0\1\u0325\77\0\1\u0326\30\0\1\u0326\20\0"+
    "\4\u02d8\1\0\1\u02d8\1\u01e3\6\u02d8\3\0\60\u02d8\2\0"+
    "\2\u02d8\16\0\1\u0327\51\0\1\u0327\25\0\4\u02db\1\0"+
    "\1\u02db\1\u01f0\6\u02db\3\0\60\u02db\2\0\2\u02db\5\0"+
    "\4\u0328\1\0\1\u0328\1\0\6\u0328\3\0\60\u0328\2\0"+
    "\2\u0328\5\0\4\u0329\1\0\1\u032a\1\0\6\u0329\3\0"+
    "\60\u0329\2\0\2\u0329\20\0\1\u032b\50\0\1\u032b\125\0"+
    "\1\u032c\32\0\1\u032d\27\0\1\u032d\35\0\4\u02e3\1\0"+
    "\1\u02e3\1\u01fc\6\u02e3\3\0\60\u02e3\2\0\2\u02e3\25\0"+
    "\1\u032e\27\0\1\u032e\40\0\4\u032f\1\0\1\u032f\1\0"+
    "\6\u032f\3\0\60\u032f\2\0\2\u032f\5\0\4\u0330\1\0"+
    "\1\u0331\1\0\6\u0330\3\0\60\u0330\2\0\2\u0330\5\0"+
    "\4\u0283\1\0\1\u0283\1\0\6\u0283\3\0\17\u0283\1\u0332"+
    "\30\u0283\1\u0332\7\u0283\2\0\2\u0283\5\0\4\u02e9\1\0"+
    "\1\u02e9\1\u0200\6\u02e9\3\0\60\u02e9\2\0\2\u02e9\5\0"+
    "\4\u02eb\1\0\1\u02eb\1\u0287\1\u0333\5\u02eb\3\0\60\u02eb"+
    "\2\0\2\u02eb\5\0\4\u02ec\1\0\1\u02ec\1\0\6\u02ec"+
    "\3\0\60\u02ec\2\0\2\u02ec\5\0\4\u0334\1\0\1\u0334"+
    "\1\0\6\u0334\3\0\60\u0334\2\0\2\u0334\5\0\4\u02ef"+
    "\1\0\1\u02ef\1\u0206\6\u02ef\3\0\60\u02ef\2\0\2\u02ef"+
    "\5\0\4\u0335\1\0\1\u0335\1\0\6\u0335\3\0\60\u0335"+
    "\2\0\2\u0335\5\0\4\u0336\1\0\1\u0337\1\0\6\u0336"+
    "\3\0\60\u0336\2\0\2\u0336\5\0\4\u02f3\1\0\1\u02f3"+
    "\1\u020d\6\u02f3\3\0\60\u02f3\2\0\2\u02f3\5\0\4\u020f"+
    "\1\0\1\u0338\1\u0187\1\u0291\5\u020f\3\0\16\u020f\1\u0339"+
    "\41\u020f\2\0\2\u020f\12\0\1\u0189\30\0\1\u018a\57\0"+
    "\1\u033a\30\0\1\u033b\52\0\4\u02f8\1\0\1\u02f8\1\u029a"+
    "\1\u033c\5\u02f8\3\0\60\u02f8\2\0\2\u02f8\5\0\4\u02f9"+
    "\1\0\1\u02f9\1\0\6\u02f9\3\0\60\u02f9\2\0\2\u02f9"+
    "\5\0\4\u033d\1\0\1\u033d\1\0\6\u033d\3\0\60\u033d"+
    "\2\0\2\u033d\5\0\4\u02fc\1\0\1\u02fc\1\u021d\6\u02fc"+
    "\3\0\60\u02fc\2\0\2\u02fc\5\0\4\u02ff\1\0\1\u02ff"+
    "\1\u02a1\1\u033e\5\u02ff\3\0\60\u02ff\2\0\2\u02ff\5\0"+
    "\4\u0300\1\0\1\u0300\1\0\6\u0300\3\0\60\u0300\2\0"+
    "\2\u0300\5\0\4\u033f\1\0\1\u033f\1\0\6\u033f\3\0"+
    "\60\u033f\2\0\2\u033f\5\0\4\u0300\1\0\1\u0300\1\0"+
    "\6\u0300\3\0\4\u0300\1\u0340\27\u0300\1\u0340\23\u0300\2\0"+
    "\2\u0300\5\0\4\u0303\1\0\1\u0303\1\u02a5\1\u0341\5\u0303"+
    "\3\0\60\u0303\2\0\2\u0303\5\0\4\u0304\1\0\1\u0304"+
    "\1\0\6\u0304\3\0\60\u0304\2\0\2\u0304\5\0\4\u0342"+
    "\1\0\1\u0342\1\0\6\u0342\3\0\60\u0342\2\0\2\u0342"+
    "\27\0\1\u0343\27\0\1\u0343\36\0\4\u022f\1\0\1\u022f"+
    "\1\0\6\u022f\3\0\5\u022f\1\u0344\16\u022f\1\u0344\33\u022f"+
    "\2\0\2\u022f\5\0\4\u0345\1\0\1\u0345\1\0\6\u0345"+
    "\3\0\60\u0345\2\0\2\u0345\5\0\4\u0346\1\0\1\u0347"+
    "\1\0\6\u0346\3\0\60\u0346\2\0\2\u0346\5\0\4\u030b"+
    "\1\0\1\u030b\1\u0233\6\u030b\3\0\60\u030b\2\0\2\u030b"+
    "\5\0\4\u030c\1\0\1\u030c\1\u0348\1\u0349\5\u030c\3\0"+
    "\60\u030c\2\0\2\u030c\5\0\4\u030c\1\0\1\u030c\1\u0348"+
    "\1\u034a\5\u030c\3\0\60\u030c\2\0\2\u030c\5\0\4\u030e"+
    "\1\0\1\u030e\1\0\6\u030e\3\0\60\u030e\2\0\2\u030e"+
    "\5\0\4\u034b\1\0\1\u034b\1\0\6\u034b\3\0\60\u034b"+
    "\2\0\2\u034b\5\0\4\u0310\1\0\1\u0310\1\u02b5\1\u034c"+
    "\5\u0310\3\0\60\u0310\2\0\2\u0310\5\0\4\u0311\1\0"+
    "\1\u0311\1\0\6\u0311\3\0\60\u0311\2\0\2\u0311\5\0"+
    "\4\u034d\1\0\1\u034d\1\0\6\u034d\3\0\60\u034d\2\0"+
    "\2\u034d\15\0\1\u034e\100\0\4\u034f\1\0\1\u034f\1\0"+
    "\6\u034f\3\0\60\u034f\2\0\2\u034f\5\0\4\u0350\1\0"+
    "\1\u0351\1\0\6\u0350\3\0\60\u0350\2\0\2\u0350\12\0"+
    "\1\u0352\30\0\1\u0353\52\0\1\u0354\1\u0355\2\0\1\u0355"+
    "\3\0\1\u0355\35\0\1\u0354\13\0\1\u0354\7\0\5\u0354"+
    "\4\0\1\u0354\5\0\4\u031a\1\0\1\u031a\1\u02c5\1\u0356"+
    "\5\u031a\3\0\60\u031a\2\0\2\u031a\5\0\4\u031b\1\0"+
    "\1\u031b\1\0\6\u031b\3\0\60\u031b\2\0\2\u031b\5\0"+
    "\4\u0357\1\0\1\u0357\1\0\6\u0357\3\0\60\u0357\2\0"+
    "\2\u0357\17\0\1\u0358\101\0\1\u013f\65\0\1\u013f\17\0"+
    "\4\u0320\1\0\1\u0320\1\u0258\6\u0320\3\0\60\u0320\2\0"+
    "\2\u0320\5\0\4\u0322\1\0\1\u0322\1\u025a\6\u0322\3\0"+
    "\60\u0322\2\0\2\u0322\37\0\1\u0359\23\0\1\u0359\57\0"+
    "\1\u035a\16\0\1\u035a\56\0\1\u035b\122\0\1\u035c\27\0"+
    "\1\u035c\65\0\1\u035d\57\0\4\u0328\1\0\1\u0328\1\u02dc"+
    "\1\u035e\5\u0328\3\0\60\u0328\2\0\2\u0328\5\0\4\u0329"+
    "\1\0\1\u0329\1\0\6\u0329\3\0\60\u0329\2\0\2\u0329"+
    "\5\0\4\u035f\1\0\1\u035f\1\0\6\u035f\3\0\60\u035f"+
    "\2\0\2\u035f\40\0\1\u013f\23\0\1\u013f\52\0\1\u0360"+
    "\27\0\1\u0360\37\0\4\u032f\1\0\1\u032f\1\u02e5\1\u0361"+
    "\5\u032f\3\0\60\u032f\2\0\2\u032f\5\0\4\u0330\1\0"+
    "\1\u0330\1\0\6\u0330\3\0\60\u0330\2\0\2\u0330\5\0"+
    "\4\u0362\1\0\1\u0362\1\0\6\u0362\3\0\60\u0362\2\0"+
    "\2\u0362\5\0\4\u0283\1\0\1\u0283\1\0\6\u0283\3\0"+
    "\4\u0283\1\u0363\27\u0283\1\u0363\23\u0283\2\0\2\u0283\5\0"+
    "\4\u0334\1\0\1\u0334\1\u0287\6\u0334\3\0\60\u0334\2\0"+
    "\2\u0334\5\0\4\u0335\1\0\1\u0335\1\u02f0\1\u0364\5\u0335"+
    "\3\0\60\u0335\2\0\2\u0335\5\0\4\u0336\1\0\1\u0336"+
    "\1\0\6\u0336\3\0\60\u0336\2\0\2\u0336\5\0\4\u0365"+
    "\1\0\1\u0365\1\0\6\u0365\3\0\60\u0365\2\0\2\u0365"+
    "\5\0\4\u0212\1\0\1\u0212\1\u0187\1\u0366\5\u0212\3\0"+
    "\60\u0212\2\0\2\u0212\5\0\4\u0367\1\0\1\u0368\1\u0187"+
    "\6\u0367\3\0\60\u0367\2\0\2\u0367\5\0\4\u0369\1\0"+
    "\1\u0369\1\0\6\u0369\3\0\60\u0369\2\0\2\u0369\5\0"+
    "\4\u036a\1\0\1\u036b\1\0\6\u036a\3\0\60\u036a\2\0"+
    "\2\u036a\5\0\4\u033d\1\0\1\u033d\1\u029a\6\u033d\3\0"+
    "\60\u033d\2\0\2\u033d\5\0\4\u033f\1\0\1\u033f\1\u02a1"+
    "\6\u033f\3\0\60\u033f\2\0\2\u033f\5\0\4\u0300\1\0"+
    "\1\u0300\1\0\6\u0300\3\0\1\u036c\27\u0300\1\u036c\27\u0300"+
    "\2\0\2\u0300\5\0\4\u0342\1\0\1\u0342\1\u02a5\6\u0342"+
    "\3\0\60\u0342\2\0\2\u0342\30\0\1\u036d\27\0\1\u036d"+
    "\35\0\4\u022f\1\0\1\u022f\1\0\6\u022f\3\0\4\u022f"+
    "\1\u036e\27\u022f\1\u036e\23\u022f\2\0\2\u022f\5\0\4\u0345"+
    "\1\0\1\u0345\1\u0308\1\u036f\5\u0345\3\0\60\u0345\2\0"+
    "\2\u0345\5\0\4\u0346\1\0\1\u0346\1\0\6\u0346\3\0"+
    "\60\u0346\2\0\2\u0346\5\0\4\u0370\1\0\1\u0370\1\0"+
    "\6\u0370\3\0\60\u0370\2\0\2\u0370\5\0\4\u030c\1\0"+
    "\1\u030c\1\0\6\u030c\3\0\60\u030c\2\0\2\u030c\5\0"+
    "\4\u030c\1\0\1\u0371\1\u0348\1\u0349\5\u030c\3\0\16\u030c"+
    "\1\u0372\41\u030c\2\0\2\u030c\5\0\4\u034b\1\0\1\u034b"+
    "\1\u0348\6\u034b\3\0\60\u034b\2\0\2\u034b\5\0\4\u034d"+
    "\1\0\1\u034d\1\u02b5\6\u034d\3\0\60\u034d\2\0\2\u034d"+
    "\5\0\4\u034f\1\0\1\u034f\1\u0314\1\u0373\5\u034f\3\0"+
    "\60\u034f\2\0\2\u034f\5\0\4\u0350\1\0\1\u0350\1\0"+
    "\6\u0350\3\0\60\u0350\2\0\2\u0350\5\0\4\u0374\1\0"+
    "\1\u0374\1\0\6\u0374\3\0\60\u0374\2\0\2\u0374\5\0"+
    "\4\u0375\1\0\1\u0375\1\0\6\u0375\3\0\60\u0375\2\0"+
    "\2\u0375\5\0\4\u0376\1\0\1\u0377\1\0\6\u0376\3\0"+
    "\60\u0376\2\0\2\u0376\5\0\1\u0354\5\0\1\u0378\1\u0379"+
    "\36\0\1\u0354\13\0\1\u0354\7\0\5\u0354\4\0\1\u0354"+
    "\5\0\1\u0354\45\0\1\u0354\13\0\1\u0354\7\0\5\u0354"+
    "\4\0\1\u0354\5\0\4\u0357\1\0\1\u0357\1\u02c5\6\u0357"+
    "\3\0\60\u0357\2\0\2\u0357\27\0\1\u037a\27\0\1\u037a"+
    "\61\0\1\u037b\27\0\1\u037b\72\0\1\u037c\31\0\1\u037c"+
    "\41\0\1\u037d\27\0\1\u037d\63\0\1\u037e\27\0\1\u037e"+
    "\35\0\4\u035f\1\0\1\u035f\1\u02dc\6\u035f\3\0\60\u035f"+
    "\2\0\2\u035f\45\0\1\u037f\17\0\1\u037f\30\0\4\u0362"+
    "\1\0\1\u0362\1\u02e5\6\u0362\3\0\60\u0362\2\0\2\u0362"+
    "\5\0\4\u0283\1\0\1\u0283\1\0\6\u0283\3\0\5\u0283"+
    "\1\u0380\16\u0283\1\u0380\33\u0283\2\0\2\u0283\5\0\4\u0365"+
    "\1\0\1\u0365\1\u02f0\6\u0365\3\0\60\u0365\2\0\2\u0365"+
    "\5\0\4\u0367\1\0\1\u0367\1\u0187\6\u0367\3\0\60\u0367"+
    "\2\0\2\u0367\5\0\4\u0294\1\0\1\u0294\1\u0187\6\u0294"+
    "\3\0\60\u0294\2\0\2\u0294\5\0\4\u0369\1\0\1\u0369"+
    "\1\u033a\1\u0381\5\u0369\3\0\60\u0369\2\0\2\u0369\5\0"+
    "\4\u036a\1\0\1\u036a\1\0\6\u036a\3\0\60\u036a\2\0"+
    "\2\u036a\5\0\4\u0382\1\0\1\u0382\1\0\6\u0382\3\0"+
    "\60\u0382\2\0\2\u0382\5\0\4\u0300\1\0\1\u0300\1\0"+
    "\6\u0300\3\0\2\u0300\1\u0383\27\u0300\1\u0383\25\u0300\2\0"+
    "\2\u0300\20\0\1\u0384\50\0\1\u0384\24\0\3\u022f\1\u0385"+
    "\1\0\1\u022f\1\0\6\u022f\3\0\51\u022f\1\u0385\6\u022f"+
    "\2\0\2\u022f\5\0\4\u0370\1\0\1\u0370\1\u0386\6\u0370"+
    "\3\0\60\u0370\2\0\2\u0370\5\0\4\u0387\1\0\1\u0387"+
    "\1\u0348\1\u0388\5\u0387\3\0\60\u0387\2\0\2\u0387\5\0"+
    "\4\u0389\1\0\1\u038a\1\u0348\6\u0389\3\0\60\u0389\2\0"+
    "\2\u0389\5\0\4\u0374\1\0\1\u0374\1\u0314\6\u0374\3\0"+
    "\60\u0374\2\0\2\u0374\5\0\4\u0375\1\0\1\u0375\1\u0352"+
    "\1\u038b\5\u0375\3\0\60\u0375\2\0\2\u0375\5\0\4\u0376"+
    "\1\0\1\u0376\1\0\6\u0376\3\0\60\u0376\2\0\2\u0376"+
    "\5\0\4\u038c\1\0\1\u038c\1\0\6\u038c\3\0\60\u038c"+
    "\2\0\2\u038c\5\0\1\u038d\1\u038e\2\0\1\u038e\3\0"+
    "\1\u038e\35\0\1\u038d\13\0\1\u038d\7\0\5\u038d\4\0"+
    "\1\u038d\42\0\1\u013f\31\0\1\u013f\43\0\1\u038f\27\0"+
    "\1\u038f\51\0\1\u0390\50\0\1\u0390\35\0\1\u0391\51\0"+
    "\1\u0391\25\0\4\u0283\1\0\1\u0283\1\0\6\u0283\3\0"+
    "\13\u0283\1\u0392\23\u0283\1\u0392\20\u0283\2\0\2\u0283\5\0"+
    "\4\u0382\1\0\1\u0382\1\u033a\6\u0382\3\0\60\u0382\2\0"+
    "\2\u0382\5\0\4\u0300\1\0\1\u0300\1\0\6\u0300\3\0"+
    "\3\u0300\1\u0393\27\u0300\1\u0393\24\u0300\2\0\2\u0300\27\0"+
    "\1\u0394\27\0\1\u0394\36\0\4\u022f\1\0\1\u022f\1\0"+
    "\6\u022f\3\0\14\u022f\1\u0395\10\u022f\1\u0395\32\u022f\2\0"+
    "\2\u022f\5\0\4\u0396\1\0\1\u0396\1\0\6\u0396\3\0"+
    "\60\u0396\2\0\2\u0396\5\0\4\u0387\1\0\1\u0387\1\u0397"+
    "\1\u0398\5\u0387\3\0\60\u0387\2\0\2\u0387\5\0\4\u0389"+
    "\1\0\1\u0389\1\u0348\6\u0389\3\0\60\u0389\2\0\2\u0389"+
    "\5\0\4\u0399\1\0\1\u0399\1\u0348\6\u0399\3\0\60\u0399"+
    "\2\0\2\u0399\5\0\4\u038c\1\0\1\u038c\1\u0352\6\u038c"+
    "\3\0\60\u038c\2\0\2\u038c\5\0\1\u038d\45\0\1\u038d"+
    "\13\0\1\u038d\7\0\5\u038d\1\0\1\u039a\2\0\1\u038d"+
    "\5\0\1\u038d\45\0\1\u038d\13\0\1\u038d\7\0\5\u038d"+
    "\4\0\1\u038d\17\0\1\u039b\101\0\1\u039c\65\0\1\u039c"+
    "\42\0\1\u039d\27\0\1\u039d\35\0\4\u0283\1\0\1\u0283"+
    "\1\0\6\u0283\3\0\4\u0283\1\u039e\27\u0283\1\u039e\23\u0283"+
    "\2\0\2\u0283\5\0\4\u0300\1\0\1\u0300\1\0\6\u0300"+
    "\3\0\5\u0300\1\u039f\16\u0300\1\u039f\33\u0300\2\0\2\u0300"+
    "\25\0\1\u03a0\27\0\1\u03a0\40\0\4\u022f\1\0\1\u022f"+
    "\1\0\4\u022f\1\u03a1\1\u022f\3\0\44\u022f\1\u03a1\13\u022f"+
    "\2\0\2\u022f\5\0\4\u0396\1\0\1\u0396\1\u0386\1\u03a2"+
    "\5\u0396\3\0\60\u0396\2\0\2\u0396\5\0\4\u0387\1\0"+
    "\1\u0387\1\0\6\u0387\3\0\60\u0387\2\0\2\u0387\5\0"+
    "\4\u0399\1\0\1\u0399\1\u0397\6\u0399\3\0\60\u0399\2\0"+
    "\2\u0399\5\0\1\u03a3\1\u03a4\2\0\1\u03a4\3\0\1\u03a4"+
    "\35\0\1\u03a3\13\0\1\u03a3\7\0\5\u03a3\4\0\1\u03a3"+
    "\45\0\1\u03a5\17\0\1\u03a5\60\0\1\u03a6\35\0\1\u03a6"+
    "\44\0\1\u03a7\27\0\1\u03a7\36\0\4\u0283\1\0\1\u0283"+
    "\1\0\4\u0283\1\u03a8\1\u0283\3\0\44\u0283\1\u03a8\13\u0283"+
    "\2\0\2\u0283\5\0\4\u0300\1\0\1\u0300\1\0\6\u0300"+
    "\3\0\2\u0300\1\u03a9\27\u0300\1\u03a9\25\u0300\2\0\2\u0300"+
    "\5\0\3\u022f\1\u03aa\1\0\1\u022f\1\0\6\u022f\3\0"+
    "\51\u022f\1\u03aa\6\u022f\2\0\2\u022f\5\0\1\u03a3\35\0"+
    "\1\u03ab\7\0\1\u03a3\13\0\1\u03a3\7\0\5\u03a3\4\0"+
    "\1\u03a3\5\0\1\u03a3\45\0\1\u03a3\13\0\1\u03a3\7\0"+
    "\5\u03a3\4\0\1\u03a3\20\0\1\u03ac\50\0\1\u03ac\47\0"+
    "\1\u03ad\27\0\1\u03ad\61\0\1\u03ae\27\0\1\u03ae\34\0"+
    "\4\u0283\1\0\1\u0283\1\0\6\u0283\3\0\7\u0283\1\u03af"+
    "\35\u0283\1\u03af\12\u0283\2\0\2\u0283\5\0\4\u022f\1\0"+
    "\1\u022f\1\0\6\u022f\3\0\3\u022f\1\u03b0\27\u022f\1\u03b0"+
    "\24\u022f\2\0\2\u022f\5\0\1\u03b1\1\u03b2\2\0\1\u03b2"+
    "\3\0\1\u03b2\35\0\1\u03b1\13\0\1\u03b1\7\0\5\u03b1"+
    "\4\0\1\u03b1\12\0\1\u03b3\30\0\1\u03b4\63\0\1\u01a7"+
    "\51\0\1\u01a7\25\0\4\u0283\1\0\1\u0283\1\0\6\u0283"+
    "\3\0\4\u0283\1\u03b5\27\u0283\1\u03b5\23\u0283\2\0\2\u0283"+
    "\5\0\4\u022f\1\0\1\u022f\1\0\4\u022f\1\u03b6\1\u022f"+
    "\3\0\44\u022f\1\u03b6\13\u022f\2\0\2\u022f\5\0\1\u03b1"+
    "\5\0\1\u03b7\37\0\1\u03b1\13\0\1\u03b1\7\0\5\u03b1"+
    "\4\0\1\u03b1\5\0\1\u03b1\45\0\1\u03b1\13\0\1\u03b1"+
    "\7\0\5\u03b1\4\0\1\u03b1\5\0\4\u03b8\1\0\1\u03b8"+
    "\1\0\6\u03b8\3\0\60\u03b8\2\0\2\u03b8\5\0\4\u03b9"+
    "\1\0\1\u03ba\1\0\6\u03b9\3\0\60\u03b9\2\0\2\u03b9"+
    "\5\0\4\u022f\1\0\1\u022f\1\0\6\u022f\3\0\2\u022f"+
    "\1\u03bb\27\u022f\1\u03bb\25\u022f\2\0\2\u022f\13\0\1\u0378"+
    "\1\u0379\101\0\4\u03b8\1\0\1\u03b8\1\u03b3\1\u03bc\5\u03b8"+
    "\3\0\60\u03b8\2\0\2\u03b8\5\0\4\u03b9\1\0\1\u03b9"+
    "\1\0\6\u03b9\3\0\60\u03b9\2\0\2\u03b9\5\0\4\u03bd"+
    "\1\0\1\u03bd\1\0\6\u03bd\3\0\60\u03bd\2\0\2\u03bd"+
    "\5\0\4\u03bd\1\0\1\u03bd\1\u03b3\6\u03bd\3\0\60\u03bd"+
    "\2\0\2\u03bd\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[58984];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\51\1\1\11\5\1\1\11"+
    "\1\0\1\1\1\11\1\1\2\11\13\0\1\1\2\0"+
    "\2\1\1\11\20\0\1\1\6\0\1\11\15\0\1\1"+
    "\1\0\1\1\10\0\1\1\11\0\1\1\5\0\1\1"+
    "\12\0\33\1\1\0\1\11\7\0\2\1\6\0\2\1"+
    "\1\0\1\11\6\0\1\11\2\0\1\1\1\0\1\11"+
    "\3\0\1\1\2\0\1\1\3\0\1\1\2\0\2\11"+
    "\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1"+
    "\6\0\1\1\13\0\1\11\4\0\1\1\1\0\2\1"+
    "\5\0\1\11\5\0\1\1\3\0\1\1\1\11\2\0"+
    "\1\1\4\0\1\1\3\0\1\1\4\0\1\11\1\0"+
    "\1\11\3\0\1\1\5\0\1\1\4\0\2\11\1\1"+
    "\5\0\1\11\2\0\1\1\4\0\1\1\1\0\1\1"+
    "\16\0\1\1\1\0\2\1\4\0\1\1\2\0\3\1"+
    "\10\0\1\1\2\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\11\5\0\1\1\12\0\3\1\6\0\2\1\11\0"+
    "\1\1\4\0\1\11\1\1\3\0\2\1\1\0\1\1"+
    "\6\0\2\1\14\0\2\1\3\0\1\11\2\1\1\0"+
    "\2\1\5\0\2\1\1\0\1\11\2\0\2\1\2\0"+
    "\2\1\2\0\2\1\2\0\3\1\1\0\3\1\6\0"+
    "\1\1\2\0\2\1\10\0\3\1\3\0\1\11\1\0"+
    "\1\11\4\0\2\1\1\0\2\1\5\0\3\1\4\0"+
    "\1\1\1\0\5\1\1\0\2\1\4\0\3\1\3\0"+
    "\2\1\1\0\1\11\2\0\4\1\3\0\2\1\1\0"+
    "\1\1\1\11\1\1\2\0\2\1\1\11\1\0\1\11"+
    "\1\1\1\0\4\1\1\0\1\11\5\0\2\1\1\11"+
    "\3\0\2\1\2\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\4\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\0\2\1\1\0\1\1\1\0\3\1\4\0\2\1"+
    "\1\0\1\1\1\0\6\1\10\0\2\1\4\0\2\1"+
    "\2\0\2\1\1\11\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\5\0\1\1\1\0\3\11\2\1\3\0\3\1"+
    "\2\0\2\1\3\0\2\1\1\0\2\1\1\0\1\11"+
    "\1\0\1\11\2\0\2\1\1\0\2\1\3\0\1\1"+
    "\1\0\1\11\2\1\3\0\3\1\1\11\1\0\4\1"+
    "\2\0\4\1\1\11\1\1\1\0\4\1\2\11\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\2\0\2\1\2\0"+
    "\2\1\1\0\2\1\3\0\1\11\1\1\1\0\1\11"+
    "\1\0\2\1\2\0\4\1\6\0\2\1\1\0\1\11"+
    "\1\0\1\11\1\0\5\1\1\0\2\1\4\0\7\1"+
    "\1\0\1\1\1\0\2\1\1\0\5\1\1\11\1\0"+
    "\2\1\4\0\2\1\4\0\1\11\1\0\2\1\1\0"+
    "\10\1\1\0\3\1\1\0\3\1\2\0\2\1\1\0"+
    "\2\1\1\0\1\11\2\0\2\11\2\0\4\1\1\0"+
    "\1\1\2\0\5\1\5\0\2\1\1\0\1\1\2\0"+
    "\2\1\4\0\2\1\1\11\2\1\5\0\3\1\1\0"+
    "\1\1\1\0\1\11\2\1\4\0\2\1\2\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[957];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static boolean DEBUG = false;
  LexerParserBroker pp = new LexerParserBroker();
  private String prefix = "file:" 
  + System.getProperty("user.dir")
    + System.getProperty("file.separator");


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Pound(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Pound(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ci", "configuration interaction w/ double excitations", yytext(), prefix + "00000423.htm");
          }
        case 122: break;
        case 61: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ovgf", "outer-valence Green function", yytext(), prefix + "00000462.htm");
          }
        case 123: break;
        case 58: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("write formatted version of checkpoint file", yytext(), prefix + "00000435.htm");
          }
        case 124: break;
        case 22: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("set internal options", yytext(), prefix + "00000448.htm");
          }
        case 125: break;
        case 76: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ci", "quadratic CI w/ single & double excitations", yytext(), prefix + "00000423.htm");
          }
        case 126: break;
        case 91: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
            pp.system("output unformatted Fortran files", yytext(), "00000461.htm");
          }
        case 127: break;
        case 96: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("output information at various points in calculation",  yytext(), prefix + "00000468.htm");
          }
        case 128: break;
        case 64: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("pm3", "semi-empirical PM3 Hamiltonian w/ molecular mechanics", yytext(), prefix + "00000463.htm");
          }
        case 129: break;
        case 11: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:YYINITIAL: Found #T..........");
	pp.route("route section", yytext(), prefix + "00000414.htm");
	yybegin(POUND); 
        return new Symbol(PoundSym.POUNDLINE);
          }
        case 130: break;
        case 18: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("g1", "Gaussian-1 method", yytext(), prefix + "00000438.htm");
          }
        case 131: break;
        case 81: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("stable", "test stability of Hartree-Fock or density functional", yytext(), prefix + "00000475.htm");
          }
        case 132: break;
        case 66: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("dipole electric field polarizabilities", yytext(), prefix + "00000464.htm");
          }
        case 133: break;
        case 110: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                       pp.system("output unformatted Fortran files", yytext(), "00000461.htm");
          }
        case 134: break;
        case 94: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Los Alamos ECP plus MBS on Na-Bi", yytext(), prefix + "00000485.htm");
          }
        case 135: break;
        case 117: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                  pp.etc("use values of physical constants from Gaussian 86", yytext(), "00000459.htm");
          }
        case 136: break;
        case 63: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("LP-*G basis", yytext(), prefix + "00000485.htm");
          }
        case 137: break;
        case 29: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("am1", "semi-empirical AM1 Hamiltonian", yytext(), prefix + "00000416.htm");
          }
        case 138: break;
        case 119: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("cbs", "complete basis set extrapolation of MP2", yytext(), prefix + "00000421.htm");
          }
        case 139: break;
        case 20: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Dunning/Huzinaga double zeta basis", yytext(), prefix + "00000485.htm");
          }
        case 140: break;
        case 65: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("output information at various points in calculation", yytext(), prefix + "00000468.htm");
          }
        case 141: break;
        case 13: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("rpa", "time-dependent excited-state with random-phase approx.", yytext(), prefix + "rpak.htm");
          }
        case 142: break;
        case 104: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("print current basis set in tabular form", yytext(), prefix + "00000442.htm");
          }
        case 143: break;
        case 6: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: found EOL");
	      yybegin(IGNOREALL);
          }
        case 144: break;
        case 33: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ci", "configuration interaction w/ single excitations", yytext(), prefix + "00000423.htm");
          }
        case 145: break;
        case 107: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("integral", "two-electron integrals & derivatives", yytext(), prefix + "00000447.htm");
          }
        case 146: break;
        case 86: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Stephens/Basch/Krauss ECP basis", yytext(), prefix + "00000485.htm");
          }
        case 147: break;
        case 2: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: could not analyze input " + yytext());
  pp.unknown("unknown keyword", yytext());
          }
        case 148: break;
        case 121: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                              pp.method("trans", "algorithm for integral transformations", yytext(), prefix + "00000480.htm");
          }
        case 149: break;
        case 37: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("mp", "HF with Moeller-Plesset correlation energy w/ substitutions", yytext(), prefix + "00000456.htm");
          }
        case 150: break;
        case 68: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("cbs", "complete basis set method", yytext(), prefix + "00000420.htm");
          }
        case 151: break;
        case 48: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("scan", "potential energy surface scan", yytext(), prefix + "00000472.htm.htm");
          }
        case 152: break;
        case 36: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("mp", "HF with Moeller-Plesset correlation energy correction", yytext(), prefix + "00000456.htm");
          }
        case 153: break;
        case 73: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("guess", "initial guess for HF wavefunction", yytext(), prefix + "00000443.htm");
          }
        case 154: break;
        case 30: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("basis sets of Barone for hyperfine coupling constants", yytext(), prefix + "00000485.htm");
          }
        case 155: break;
        case 78: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("IRCMax calculation of Petersson, et al.", yytext(), prefix + "ircmax.htm");
          }
        case 156: break;
        case 21: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("follow reaction path", yytext(), prefix + "00000449.htm");
          }
        case 157: break;
        case 72: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("g1", "Gaussian-2 w/ MP2 corrections to basis extensions", yytext(), prefix + "00000438.htm");
          }
        case 158: break;
        case 74: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                    pp.etc("units used in Z-matrix", yytext(), prefix + "00000481.htm");
          }
        case 159: break;
        case 95: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Stuttgart/Dresden ECP basis", yytext(), prefix + "00000485.htm");
          }
        case 160: break;
        case 8: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:YYINITIAL: Found #N..........");
	pp.route("route section", yytext(), prefix + "00000414.htm");
	yybegin(POUND); 
        return new Symbol(PoundSym.POUNDLINE);
          }
        case 161: break;
        case 50: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("symm", "use molecular symmetry", yytext(), prefix + "00000476.htm");
          }
        case 162: break;
        case 97: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
            pp.system("provide statistics of I/O and CPU usage", yytext(), "00000479.htm");
          }
        case 163: break;
        case 4: 
          { if(Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("DFT", " STANDARD COMBINATION METHOD", yytext(), prefix + "00000422.htm");
          }
        case 164: break;
        case 106: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("mm", "molecular mechanics w/ DREIDING force field", yytext(), prefix + "mmmk.htm");
          }
        case 165: break;
        case 115: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                pp.system("trajectory", yytext(), "trajkey.htm");
          }
        case 166: break;
        case 88: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.density("evaluate density over a 3D grid of points", yytext(), prefix + "00000430.htm");
          }
        case 167: break;
        case 87: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("background charge distribution", yytext(), prefix + "00000424.htm");
          }
        case 168: break;
        case 92: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.density("generalized densities based on the Z-Vector", yytext(), prefix + "00000431.htm");
          }
        case 169: break;
        case 14: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("bd", "Brueckner-Doubles", yytext(), prefix + "00000418.htm");
          }
        case 170: break;
        case 101: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("modify molecule specification after generation", yytext(), prefix + "00000452.htm");
          }
        case 171: break;
        case 56: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.density("evaluate density over a 3D grid (cube) of points", yytext(), prefix + "00000430.htm");
          }
        case 172: break;
        case 98: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("place results from calculation into site archive", yytext(), prefix + "00000417.htm");
          }
        case 173: break;
        case 83: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("substitute model potential for core electrons", yytext(), prefix + "00000467.htm");
          }
        case 174: break;
        case 111: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ci", "quadratic CI w/ single & double excitations & triples", yytext(), prefix + "00000423.htm");
          }
        case 175: break;
        case 103: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("format current basis set for general basis set input", yytext(), prefix + "00000441.htm");
          }
        case 176: break;
        case 59: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("mndo", "semi-empirical MNDO Hamiltonian", yytext(), prefix + "00000455.htm");
          }
        case 177: break;
        case 3: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("DFT", "HYBRID COMBINATION METHOD", yytext(), prefix + "00000422.htm");
          }
        case 178: break;
        case 79: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
            pp.etc("nonstd", yytext(), "00000459.htm");
          }
        case 179: break;
        case 55: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ccd", "coupled clusters w/ single/double substitution", yytext(), prefix + "00000422.htm");
          }
        case 180: break;
        case 100: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("complex", "complex molecular orbitals", yytext(), prefix + "00000428.htm");
          }
        case 181: break;
        case 113: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("generate archive entry using info. on checkpoint file", yytext(), prefix + "00000470.htm");
          }
        case 182: break;
        case 62: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:YYINITIAL: Found # SP,..........");
           pp.route("route section", yytext(), prefix + "00000471.htm");
	   yybegin(POUND); 
           return new Symbol(PoundSym.POUNDLINE);
          }
        case 183: break;
        case 105: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                           pp.etc("units used in Z-matrix", yytext(), prefix + "00000481.htm");
          }
        case 184: break;
        case 5: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
          }
        case 185: break;
        case 51: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("electrostatic properties", yytext(), prefix + "00000466.htm");
          }
        case 186: break;
        case 47: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.obsolete("obsolete procedure", yytext(), prefix + "00000473.htm");
          }
        case 187: break;
        case 35: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("fmm", "fast multipole method", yytext(), prefix + "fmmkey.htm");
          }
        case 188: break;
        case 102: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("disk storage available for scratch data", yytext(), prefix + "00000453.htm");
          }
        case 189: break;
        case 15: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ci", "configuration interaction w/ single & double excitations", yytext(), prefix + "00000423.htm");
          }
        case 190: break;
        case 10: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:YYINITIAL: Found #P..........");
	pp.route("route section", yytext(), prefix + "00000414.htm");
	yybegin(POUND); 
        return new Symbol(PoundSym.POUNDLINE);
          }
        case 191: break;
        case 24: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Goddard/Smedley ECP basis", yytext(), prefix + "00000485.htm");
          }
        case 192: break;
        case 38: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("user-specified basis set", yytext(), prefix + "00000439.htm");
          }
        case 193: break;
        case 49: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("Onsager model for presence of solvent", yytext(), prefix + "00000474.htm");
          }
        case 194: break;
        case 75: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                    pp.geometry("geometry optimization", yytext(), "00000460.htm");
          }
        case 195: break;
        case 43: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("internally stored Gaussian 98 basis set", yytext(), prefix + "00000485.htm");
          }
        case 196: break;
        case 82: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("calculate presence of solvent", yytext(), prefix + "00000474.htm");
          }
        case 197: break;
        case 40: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("hf", "unrestricted Hartree-Fock", yytext(), prefix + "00000445.htm");
          }
        case 198: break;
        case 84: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
            pp.method("testmo", "test molecular orbital coefficients", yytext(), prefix + "00000477.htm");
          }
        case 199: break;
        case 77: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("zindo", "excited-state w/ ZINDO-1", yytext(), prefix + "zindok.htm");
          }
        case 200: break;
        case 118: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                    pp.method("trans", "algorithm for integral transformations", yytext(), prefix + "00000480.htm");
          }
        case 201: break;
        case 89: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("mindo3", "semi-empirical MINDO3 Hamiltonian", yytext(), prefix + "00000454.htm");
          }
        case 202: break;
        case 19: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("density functional theory model",  yytext(), prefix + "00000432.htm");
          }
        case 203: break;
        case 46: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.system("username stored in archive entry", yytext(), prefix + "00000457.htm");
          }
        case 204: break;
        case 108: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("read basis set from checkpoint file", yytext(), prefix + "00000425.htm");
          }
        case 205: break;
        case 17: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("g1", "Gaussian-2 method", yytext(), prefix + "00000438.htm");
          }
        case 206: break;
        case 31: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("hf", "restricted Hartree-Fock", yytext(), prefix + "00000445.htm");
          }
        case 207: break;
        case 12: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("basis of Ahlrichs, et al.", yytext(), prefix + "00000485.htm");
          }
        case 208: break;
        case 16: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("hf", "Hartree-Fock", yytext(), prefix + "00000445.htm");
          }
        case 209: break;
        case 41: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("mm", "molecular mechanics w/ UFF force field", yytext(), prefix + "mmmk.htm");
          }
        case 210: break;
        case 70: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("force", "energy gradient on nuclei", yytext(), prefix + "00000436.htm");
          }
        case 211: break;
        case 67: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("mm", "molecular mechanics w/ Amber force field", yytext(), prefix + "mmmk.htm");
          }
        case 212: break;
        case 23: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("NMR shielding tensors and magnetic susceptibilities by Hartree-Fock", yytext(), prefix + "00000458.htm");
          }
        case 213: break;
        case 112: 
          { yybegin(YYINITIAL);
                     return new Symbol(PoundSym.LINK);
          }
        case 214: break;
        case 7: 
          { yybegin(YYINITIAL);
             return new Symbol(PoundSym.PERCENT_SPEC);
          }
        case 215: break;
        case 27: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("pop", "molecular orbital & populations analysis", yytext(), prefix + "00000465.htm");
          }
        case 216: break;
        case 99: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Dunning's correlation consistent basis sets", yytext(), prefix + "00000485.htm");
          }
        case 217: break;
        case 25: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.scf("self-consistent field procedure", yytext(), prefix + "00000473.htm");
          }
        case 218: break;
        case 114: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                      pp.system("output unformatted Fortran files", yytext(), "00000461.htm");
          }
        case 219: break;
        case 45: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("indo", "semi-empirical INDO Hamiltonian", yytext(), prefix + "00000446.htm");
          }
        case 220: break;
        case 120: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                           pp.method("trans", "algorithm for integral transformations", yytext(), prefix + "00000480.htm");
          }
        case 221: break;
        case 57: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("freq", "vibrational frequencies", yytext(), prefix + "00000437.htm");
          }
        case 222: break;
        case 53: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("hf", "spin-restricted open-shell Hartree-Fock", yytext(), prefix + "00000445.htm");
          }
        case 223: break;
        case 71: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Midi! basis of Truhlar, et al.", yytext(), prefix + "00000485.htm");
          }
        case 224: break;
        case 69: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("electric multipole or Fermi contact fields", yytext(), prefix + "00000434.htm");
          }
        case 225: break;
        case 54: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("hf", "coupled Hartree-Fock", yytext(), prefix + "00000429.htm");
          }
        case 226: break;
        case 85: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.scf("casscf", yytext(), prefix + "00000419.htm");
          }
        case 227: break;
        case 90: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
            pp.material("molecular volume", yytext(), prefix + "00000482.htm");
          }
        case 228: break;
        case 60: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.etc("source of the molecule specification input", yytext(), prefix + "00000440.htm");
          }
        case 229: break;
        case 52: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
          pp.etc("suppress automatic creation of archive entry", yytext(), prefix + "00000477.htm");
          }
        case 230: break;
        case 116: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("add additional basis functions", yytext(), prefix + "00000433.htm");
          }
        case 231: break;
        case 80: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("sparse", "sparse matrix storage", yytext(), prefix + "sparsek.htm");
          }
        case 232: break;
        case 39: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("gvb", "general valence bond", yytext(), prefix + "00000444.htm");
          }
        case 233: break;
        case 93: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.basis("Los Alamos ECP plus DZ on Na-Bi", yytext(), prefix + "00000485.htm");
          }
        case 234: break;
        case 28: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("molecular properties by theory of atoms in molecules", yytext(), prefix + "00000415.htm");
          }
        case 235: break;
        case 42: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
         pp.geometry("geometry optimization", yytext(), "00000460.htm");
          }
        case 236: break;
        case 9: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:YYINITIAL: Found #..........");
	pp.route("route section", yytext(), prefix + "00000414.htm");
	yybegin(POUND); 
        return new Symbol(PoundSym.POUNDLINE);
          }
        case 237: break;
        case 44: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.material("Local Spin Density Approximation", yytext(), prefix + "00000450.htm");
          }
        case 238: break;
        case 26: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("pm3", "semi-empirical PM3 Hamiltonian", yytext(), prefix + "00000463.htm");
          }
        case 239: break;
        case 34: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
  pp.method("ccd", "coupled clusters w/ double substitution", yytext(), prefix + "00000422.htm");
          }
        case 240: break;
        case 109: 
          { if (Settings.DEBUG) System.out.println("JFlex:pound:POUND: "+yytext());
                              pp.etc("units used in Z-matrix", yytext(), prefix + "00000481.htm");
          }
        case 241: break;
        case 1: 
          { 
          }
        case 242: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(PoundSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = PoundSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Pound <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Pound scanner = null;
        try {
          scanner = new Pound( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
