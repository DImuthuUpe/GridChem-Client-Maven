package org.gridchem.client;

/* The following code was generated by JFlex 1.4.1 on 4/15/05 10:21 AM */

import org.gridchem.client.*;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/15/05 10:21 AM from the specification file
 * <tt>D:/Gridchem/eclipse/workspace/gridchemsourcefiles_cvs_4_8/CUP_FLEX/finalcoord.flex</tt>
 */
public class FinalCoordLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INPUTF = 10;
  public static final int ITER2 = 2;
  public static final int INPUTE = 9;
  public static final int INPUTD = 8;
  public static final int INPUTC = 7;
  public static final int INPUTB = 6;
  public static final int INPUTA = 5;
  public static final int INTVALUE = 3;
  public static final int INPUT = 4;
  public static final int IGNOREALL = 3;
  public static final int ITER = 1;
  public static final int YYINITIAL = 0;
  public static final int FLOAT2 = 3;
  public static final int FLOAT1 = 3;
  public static final int FLOATVALUE = 3;
  public static final int ITER3 = 3;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0, 19,  3,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 23,  0,  0,  0,  0,  0, 
     0,  0,  0,  0, 31, 28,  4,  0, 27, 33,  0,  0, 34, 20, 30, 32, 
     0,  0,  0,  5, 26,  0,  0,  0, 24, 25, 18,  0,  0,  0,  0, 29, 
     0,  7,  0,  0, 17, 22, 15,  0,  0,  8,  0,  0,  0,  0, 10,  9, 
    14,  0, 11,  0,  6, 16,  0,  0, 21, 12,  0,  0,  2,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\6\1\1\2\2\1\1\3\1\1\1\4\10\1"+
    "\10\0\1\5\2\0\1\6\2\0\1\7\130\0\1\10"+
    "\42\0\1\11\1\0\1\12\2\0\1\13\11\0\1\14"+
    "\130\0\1\15\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0253\0\u0276\0\u0299\0\u0299\0\u02bc\0\u02bc"+
    "\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u02df\0\u0302\0\u0302"+
    "\0\u0325\0\u0348\0\u0348\0\u036b\0\u038e\0\u038e\0\u04a6\0\u04c9"+
    "\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1"+
    "\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9"+
    "\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811"+
    "\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929"+
    "\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59"+
    "\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71"+
    "\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89"+
    "\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1"+
    "\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9"+
    "\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b\0\u0181\0\u10ae"+
    "\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6"+
    "\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb\0\u12de"+
    "\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3\0\u13f6"+
    "\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb\0\u150e"+
    "\0\u1531\0\u0181\0\u1554\0\u0181\0\u1577\0\u159a\0\u0181\0\u15bd"+
    "\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5"+
    "\0\u0181\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784\0\u17a7\0\u17ca"+
    "\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879\0\u189c\0\u18bf\0\u18e2"+
    "\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7\0\u19fa"+
    "\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9\0\u1acc\0\u1aef\0\u1b12"+
    "\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a"+
    "\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42"+
    "\0\u1d65\0\u1d88\0\u1dab\0\u1dce\0\u1df1\0\u1e14\0\u1e37\0\u1e5a"+
    "\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72"+
    "\0\u1f95\0\u1fb8\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u208a"+
    "\0\u20ad\0\u20d0\0\u20f3\0\u2116\0\u2139\0\u215c\0\u217f\0\u21a2"+
    "\0\u21c5\0\u21e8\0\u220b\0\u222e\0\u2251\0\u2274\0\u2297\0\u22ba"+
    "\0\u22dd\0\u0181\0\u0181";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\14\1\15\14\14\1\16\50\14\1\17\1\14\1\20"+
    "\15\14\1\21\101\14\1\22\1\23\20\14\1\24\20\14"+
    "\1\25\1\26\20\14\1\26\20\14\1\27\1\30\20\14"+
    "\1\30\20\14\2\31\1\32\17\14\1\31\20\14\2\33"+
    "\1\34\17\14\1\33\20\14\2\35\1\36\17\14\1\35"+
    "\42\14\1\37\17\14\51\0\1\40\57\0\1\41\34\0"+
    "\1\42\60\0\1\43\15\0\1\44\35\0\1\22\42\0"+
    "\1\22\21\0\1\45\20\0\1\25\42\0\1\27\42\0"+
    "\1\46\1\0\1\47\40\0\1\50\42\0\1\51\1\0"+
    "\1\52\40\0\1\53\42\0\1\54\1\0\1\55\40\0"+
    "\1\56\64\0\1\57\26\0\1\60\57\0\1\61\33\0"+
    "\1\62\61\0\1\63\15\0\1\64\56\0\1\65\42\0"+
    "\1\66\25\0\1\67\43\0\1\70\50\0\1\71\62\0"+
    "\1\72\17\0\1\73\53\0\1\74\42\0\1\75\27\0"+
    "\1\76\40\0\1\77\51\0\1\100\61\0\1\101\27\0"+
    "\1\102\44\0\1\103\42\0\1\104\30\0\1\105\44\0"+
    "\1\106\44\0\1\107\63\0\1\110\13\0\1\111\56\0"+
    "\1\112\42\0\1\113\31\0\1\114\40\0\1\115\47\0"+
    "\1\116\64\0\1\117\16\0\1\120\52\0\1\121\42\0"+
    "\1\122\26\0\1\123\60\0\1\124\32\0\1\125\62\0"+
    "\1\126\26\0\1\127\44\0\1\130\42\0\1\131\32\0"+
    "\1\132\44\0\1\133\42\0\1\134\65\0\1\135\17\0"+
    "\1\136\50\0\1\137\42\0\1\140\33\0\1\141\37\0"+
    "\1\142\46\0\1\143\31\0\1\144\47\0\1\145\54\0"+
    "\1\146\42\0\1\147\34\0\1\150\40\0\1\151\44\0"+
    "\1\152\62\0\1\153\20\0\1\154\52\0\1\155\42\0"+
    "\1\156\35\0\1\157\34\0\1\160\47\0\1\161\31\0"+
    "\1\162\46\0\1\163\55\0\1\164\42\0\1\165\30\0"+
    "\1\166\57\0\1\167\45\0\1\170\52\0\1\171\27\0"+
    "\1\172\37\0\1\173\42\0\1\174\27\0\1\175\44\0"+
    "\1\176\45\0\1\177\67\0\1\200\12\0\1\201\53\0"+
    "\1\202\42\0\1\203\31\0\1\204\36\0\1\205\51\0"+
    "\1\206\61\0\1\207\14\0\1\210\57\0\1\211\42\0"+
    "\1\212\25\0\1\213\43\0\1\214\50\0\1\215\34\0"+
    "\1\216\56\0\1\217\42\0\1\220\34\0\1\221\33\0"+
    "\1\222\51\0\1\223\33\0\1\224\57\0\1\225\42\0"+
    "\1\226\36\0\1\227\33\0\1\230\47\0\1\231\35\0"+
    "\1\232\55\0\1\233\42\0\1\234\30\0\1\235\42\0"+
    "\1\236\46\0\1\237\36\0\1\240\54\0\1\241\42\0"+
    "\1\242\37\0\1\243\34\0\1\244\45\0\1\245\37\0"+
    "\1\246\53\0\1\247\42\0\1\250\31\0\1\251\57\0"+
    "\1\252\30\0\1\253\54\0\1\254\36\0\1\255\42\0"+
    "\1\256\40\0\1\257\36\0\1\260\50\0\1\261\42\0"+
    "\1\262\34\0\1\263\50\0\1\264\42\0\1\265\34\0"+
    "\1\266\50\0\1\267\42\0\1\270\41\0\1\271\43\0"+
    "\1\272\42\0\1\273\42\0\1\274\42\0\1\275\42\0"+
    "\1\276\42\0\1\277\42\0\1\300\42\0\1\301\42\0"+
    "\1\302\42\0\1\303\42\0\1\304\42\0\1\305\42\0"+
    "\1\306\42\0\1\307\42\0\1\310\42\0\1\311\42\0"+
    "\1\312\42\0\1\313\42\0\1\314\42\0\1\315\42\0"+
    "\1\316\42\0\1\317\42\0\1\320\42\0\1\321\42\0"+
    "\1\322\42\0\1\323\42\0\1\324\42\0\1\325\42\0"+
    "\1\326\42\0\1\327\42\0\1\330\42\0\1\331\42\0"+
    "\1\332\42\0\1\333\42\0\1\334\42\0\1\335\42\0"+
    "\1\336\42\0\1\337\42\0\1\340\42\0\1\341\42\0"+
    "\1\342\42\0\1\343\42\0\1\344\42\0\1\345\42\0"+
    "\1\346\42\0\1\347\42\0\1\350\42\0\1\351\42\0"+
    "\1\352\42\0\1\353\42\0\1\354\42\0\1\355\42\0"+
    "\1\356\42\0\1\357\42\0\1\360\42\0\1\361\42\0"+
    "\1\362\42\0\1\363\42\0\1\364\42\0\1\365\42\0"+
    "\1\366\42\0\1\367\42\0\1\370\42\0\1\371\42\0"+
    "\1\372\42\0\1\373\42\0\1\374\42\0\1\375\42\0"+
    "\1\376\42\0\1\377\42\0\1\u0100\42\0\1\u0101\42\0"+
    "\1\u0102\42\0\1\u0103\42\0\1\u0104\42\0\1\u0105\42\0"+
    "\1\u0106\42\0\1\u0107\42\0\1\u0108\42\0\1\u0109\42\0"+
    "\1\u010a\42\0\1\u010b\42\0\1\u010c\42\0\1\u010d\42\0"+
    "\1\u010e\42\0\1\u010f\42\0\1\u0110\42\0\1\u0111\42\0"+
    "\1\u0112\42\0\1\u0113\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\23\1\10\0\1\1\2\0\1\1\2\0"+
    "\1\1\130\0\1\11\42\0\1\11\1\0\1\11\2\0"+
    "\1\11\11\0\1\11\130\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static boolean DEBUG = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FinalCoordLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FinalCoordLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { yybegin (INPUTD);
   return new Symbol(FinalCoordSym.INPUT5, new Float(yytext()));
          }
        case 15: break;
        case 7: 
          { yybegin (INPUT);
   return new Symbol(FinalCoordSym.INPUT7, new Float(yytext()));
          }
        case 16: break;
        case 3: 
          { yybegin (INPUTB);
   return new Symbol(FinalCoordSym.INPUT3, new Integer(yytext()));
          }
        case 17: break;
        case 8: 
          { yybegin(IGNOREALL);
      return new Symbol(FinalCoordSym.SCFDONE);
          }
        case 18: break;
        case 12: 
          { yybegin(INPUTF);
            return new Symbol(FinalCoordSym.INPUT1);
          }
        case 19: break;
        case 9: 
          { yybegin(ITER2);
           return new Symbol(FinalCoordSym.FOUNDITER);
          }
        case 20: break;
        case 2: 
          { yybegin (INPUTA);
   return new Symbol(FinalCoordSym.INPUT2, new Integer(yytext()));
          }
        case 21: break;
        case 13: 
          { yybegin (ITER);
   return new Symbol(FinalCoordSym.DASH2);
          }
        case 22: break;
        case 6: 
          { yybegin (INPUTE);
   return new Symbol(FinalCoordSym.INPUT6, new Float(yytext()));
          }
        case 23: break;
        case 11: 
          { yybegin(ITER2);
	   return new Symbol(FinalCoordSym.FOUNDITER);
          }
        case 24: break;
        case 10: 
          { yybegin(ITER);
          }
        case 25: break;
        case 4: 
          { yybegin (INPUTC);
   return new Symbol(FinalCoordSym.INPUT4, new Integer(yytext()));
          }
        case 26: break;
        case 14: 
          { yybegin (INPUT);
   return new Symbol(FinalCoordSym.DASH1);
          }
        case 27: break;
        case 1: 
          { 
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(FinalCoordSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = FinalCoordSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java FinalCoordLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        FinalCoordLexer scanner = null;
        try {
          scanner = new FinalCoordLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
