/* The following code was generated by JFlex 1.4.1 on 10/3/06 10:06 AM */
package org.gridchem.client;
import org.gridchem.client.common.Settings;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/3/06 10:06 AM from the specification file
 * <tt>B3PW91.flex</tt>
 */
public class B3PW91Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FLOATMP3 = 11;
  public static final int ITER2 = 2;
  public static final int FLOATMP2 = 10;
  public static final int FLOATMP1 = 9;
  public static final int MPOPT = 8;
  public static final int INTMP = 12;
  public static final int INTVALUE = 3;
  public static final int IGNOREALL = 2;
  public static final int ITER = 1;
  public static final int YYINITIAL = 0;
  public static final int MP2 = 7;
  public static final int FLOAT2 = 6;
  public static final int FLOAT1 = 5;
  public static final int FLOATVALUE = 4;
  public static final int ITER3 = 2;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    14,  0,  0,  0,  0,  0,  0, 50, 29,  7,  0, 32,  0,  3,  4,  1, 
     2, 37, 46, 48,  2,  2, 47,  2,  2, 36, 27,  0,  0,  6,  0,  0, 
     0,  0, 31, 24, 26, 28, 25, 49, 33,  0,  0,  0,  0, 38,  8, 42, 
    34,  0, 30, 23,  0, 51,  0, 35,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 39, 11, 41, 45, 12, 16,  0, 22, 20,  0,  0, 44, 10, 21, 15, 
    19,  0, 13, 17, 18,  9,  0,  0, 40,  0, 43,  0,  5,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\6\1\1\2\23\1\1\3\1\1\36\0\1\4"+
    "\1\5\1\6\6\0\1\7\1\10\1\11\70\0\1\12"+
    "\32\0\1\13\5\0\1\14\16\0\1\15\1\16\2\0"+
    "\1\17\1\20\53\0\1\21\1\22\1\23\7\0\1\24"+
    "\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0410"+
    "\0\u0924\0\u0478\0\u0958\0\u04e0\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0680\0\u0af8\0\u06e8\0\u0b2c\0\u0750"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0924"+
    "\0\u0958\0\u098c\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554"+
    "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4"+
    "\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894"+
    "\0\u18c8\0\u18fc\0\u1930\0\u02a4\0\u1964\0\u1998\0\u19cc\0\u1a00"+
    "\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0"+
    "\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40"+
    "\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u02a4\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u02a4\0\u1fb0\0\u1fe4\0\u2018"+
    "\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u02a4\0\u02a4\0\u2288\0\u22bc\0\u02a4"+
    "\0\u02a4\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428"+
    "\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8"+
    "\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768"+
    "\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908"+
    "\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u02a4\0\u02a4\0\u02a4\0\u2bac"+
    "\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u02a4\0\u02a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\16\1\17\102\16\1\20\6\16\1\21\7\16\1\22"+
    "\3\16\1\23\77\16\1\24\1\25\1\16\1\25\32\16"+
    "\1\25\3\16\2\24\10\16\3\24\5\16\1\26\1\27"+
    "\1\16\1\27\32\16\1\27\3\16\2\26\10\16\3\26"+
    "\5\16\1\30\1\31\1\16\1\31\32\16\1\31\3\16"+
    "\2\30\10\16\3\30\5\16\1\32\1\33\1\16\1\33"+
    "\32\16\1\33\3\16\2\32\10\16\3\32\51\16\1\34"+
    "\44\16\1\35\4\16\1\36\1\16\1\37\7\16\1\40"+
    "\3\16\1\41\13\16\1\42\1\43\1\16\1\43\32\16"+
    "\1\43\3\16\2\42\10\16\3\42\5\16\1\44\1\45"+
    "\1\16\1\45\32\16\1\45\3\16\2\44\10\16\3\44"+
    "\5\16\1\46\1\47\1\16\1\47\32\16\1\47\3\16"+
    "\2\46\10\16\3\46\5\16\1\50\1\51\1\16\1\51"+
    "\32\16\1\51\3\16\2\50\10\16\3\50\3\16\75\0"+
    "\1\52\74\0\1\53\5\0\1\54\101\0\1\55\64\0"+
    "\1\56\37\0\1\57\42\0\1\24\41\0\2\24\10\0"+
    "\3\24\5\0\1\60\1\0\1\61\37\0\2\60\10\0"+
    "\3\60\5\0\1\60\41\0\2\60\10\0\3\60\5\0"+
    "\1\62\1\0\1\63\37\0\2\62\10\0\3\62\5\0"+
    "\1\62\41\0\2\62\10\0\3\62\5\0\1\64\1\0"+
    "\1\65\37\0\2\64\10\0\3\64\5\0\1\64\41\0"+
    "\2\64\10\0\3\64\45\0\1\66\43\0\1\67\124\0"+
    "\1\70\46\0\1\71\64\0\1\72\37\0\1\73\42\0"+
    "\1\74\1\0\1\75\37\0\2\74\10\0\3\74\5\0"+
    "\1\74\41\0\2\74\10\0\3\74\5\0\1\76\1\0"+
    "\1\77\37\0\2\76\10\0\3\76\5\0\1\76\41\0"+
    "\2\76\10\0\3\76\5\0\1\100\1\0\1\101\37\0"+
    "\2\100\10\0\3\100\5\0\1\100\41\0\2\100\10\0"+
    "\3\100\5\0\1\50\41\0\2\50\10\0\3\50\15\0"+
    "\1\102\65\0\1\103\100\0\1\104\61\0\1\105\104\0"+
    "\1\106\35\0\1\107\43\0\1\110\41\0\2\110\10\0"+
    "\3\110\5\0\1\111\41\0\2\111\10\0\3\111\5\0"+
    "\1\112\41\0\2\112\10\0\3\112\61\0\1\113\21\0"+
    "\1\114\115\0\1\115\44\0\1\116\104\0\1\117\35\0"+
    "\1\120\43\0\1\121\41\0\2\121\10\0\3\121\5\0"+
    "\1\122\41\0\2\122\10\0\3\122\5\0\1\123\41\0"+
    "\2\123\10\0\3\123\16\0\1\124\73\0\1\125\56\0"+
    "\1\126\63\0\1\127\71\0\1\130\63\0\1\131\40\0"+
    "\1\132\105\0\1\133\102\0\1\134\37\0\1\135\71\0"+
    "\1\136\63\0\1\137\53\0\1\140\65\0\1\141\77\0"+
    "\1\142\47\0\1\143\57\0\1\144\63\0\1\145\130\0"+
    "\1\146\22\0\1\147\123\0\1\150\23\0\1\151\57\0"+
    "\1\152\63\0\1\153\66\0\1\154\73\0\1\155\55\0"+
    "\1\156\62\0\1\157\56\0\1\160\76\0\1\161\42\0"+
    "\1\162\105\0\1\163\54\0\1\164\63\0\1\165\56\0"+
    "\1\166\76\0\1\167\55\0\1\170\56\0\1\171\77\0"+
    "\1\172\54\0\1\173\57\0\1\174\124\0\1\175\70\0"+
    "\1\176\14\0\1\177\60\0\1\200\73\0\1\201\57\0"+
    "\1\202\124\0\1\203\27\0\1\204\56\0\1\205\65\0"+
    "\1\206\65\0\1\207\63\0\1\210\114\0\1\211\61\0"+
    "\1\212\30\0\1\213\67\0\1\214\63\0\1\215\63\0"+
    "\1\216\114\0\1\217\34\0\1\220\56\0\1\221\103\0"+
    "\1\222\61\0\1\223\63\0\1\224\54\0\1\225\122\0"+
    "\1\226\15\0\1\227\101\0\1\230\63\0\1\231\54\0"+
    "\1\232\57\0\1\233\61\0\1\234\65\0\1\235\64\0"+
    "\1\236\63\0\1\237\70\0\1\240\74\0\1\241\42\0"+
    "\1\242\66\0\1\243\63\0\1\244\70\0\1\245\60\0"+
    "\1\246\57\0\1\247\64\0\1\250\62\0\1\251\63\0"+
    "\1\252\65\0\1\253\121\0\1\254\23\0\1\255\63\0"+
    "\1\256\63\0\1\257\65\0\1\260\66\0\1\261\75\0"+
    "\1\262\100\0\1\263\63\0\1\264\37\0\1\265\120\0"+
    "\1\266\52\0\1\267\63\0\1\270\37\0\1\271\52\0"+
    "\1\272\104\0\1\273\42\0\1\274\63\0\1\275\65\0"+
    "\1\276\54\0\1\277\70\0\1\300\63\0\1\301\65\0"+
    "\1\302\70\0\1\303\76\0\1\304\76\0\1\305\30\0"+
    "\1\306\116\0\1\307\33\0\1\310\101\0\1\311\43\0"+
    "\1\312\116\0\1\313\30\0\1\314\62\0\1\315\105\0"+
    "\1\316\35\0\1\317\74\0\1\320\52\0\1\321\75\0"+
    "\1\322\100\0\1\323\45\0\1\324\62\0\1\325\64\0"+
    "\1\326\65\0\1\327\67\0\1\330\106\0\1\331\15\0"+
    "\1\332\131\0\1\333\25\0\1\334\50\0\1\335\74\0"+
    "\1\336\105\0\1\337\41\0\1\340\71\0\1\341\103\0"+
    "\1\342\43\0\1\343\71\0\1\344\55\0\1\345\67\0"+
    "\1\346\100\0\1\347\34\0\1\350\100\0\1\351\46\0"+
    "\1\352\73\0\1\353\103\0\1\354\74\0\1\355\36\0"+
    "\1\356\110\0\1\357\27\0\1\360\107\0\1\361\34\0"+
    "\1\362\54\0\1\363\71\0\1\364\64\0\1\365\56\0"+
    "\1\366\60\0\1\367\102\0\1\370\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11544];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\33\1\36\0\3\1\6\0\3\1\70\0"+
    "\1\11\32\0\1\11\5\0\1\11\16\0\2\11\2\0"+
    "\2\11\53\0\3\11\7\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static boolean DEBUG = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public B3PW91Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public B3PW91Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: MP2 Found the energy");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(MPOPT);
   return new Symbol(B3PW91Sym.MPENERGY, new Float(yytext()));
          }
        case 22: break;
        case 3: 
          { if  (Settings.DEBUG) System.out.println("B3PW91Flex: MP2 Found iteration");
   if (Settings.DEBUG) System.out.println(yytext());
  yybegin (MPOPT);
   return new Symbol(B3PW91Sym.MPITER, new Integer(yytext()));
          }
        case 23: break;
        case 14: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found Maximum Force");
            yybegin(FLOAT1);
            return new Symbol(B3PW91Sym.MaxGrad1);
          }
        case 24: break;
        case 10: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found MP2 energy");
               yybegin(FLOATMP1);
              return new Symbol(B3PW91Sym.MPEnerg);
          }
        case 25: break;
        case 19: 
          { yybegin(IGNOREALL);
      return new Symbol(B3PW91Sym.MPDONE);
          }
        case 26: break;
        case 18: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found MP2(Full)");
            yybegin(MPOPT);
            return new Symbol(B3PW91Sym.MPStart);
          }
        case 27: break;
        case 21: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found Number of steps");
	   yybegin(ITER);
	   return new Symbol(B3PW91Sym.FOUNDITER1);
          }
        case 28: break;
        case 8: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: MP2 Found the maximum force");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(MPOPT);
   return new Symbol(B3PW91Sym.MPMGRAD, new Float(yytext()));
          }
        case 29: break;
        case 17: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: SCFDONE1, Optimization completed"); 
     yybegin(IGNOREALL);
      return new Symbol(B3PW91Sym.SCFDONE1);
          }
        case 30: break;
        case 13: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found RMS Force");
            yybegin(FLOAT2);
            return new Symbol(B3PW91Sym.RmsGrad1);
          }
        case 31: break;
        case 2: 
          { if  (Settings.DEBUG) System.out.println("B3PW91Flex: Found iteration");
   if (Settings.DEBUG) System.out.println(yytext());
  yybegin (ITER);
   return new Symbol(B3PW91Sym.ITERATION1, new Integer(yytext()));
          }
        case 32: break;
        case 16: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found Maximum Force");
            yybegin(FLOATMP2);
            return new Symbol(B3PW91Sym.MPMax);
          }
        case 33: break;
        case 4: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found the energy in FLOATVALUE");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(B3PW91Sym.ENERGY1, new Float(yytext()));
          }
        case 34: break;
        case 20: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found the energy in ITER");
               yybegin(FLOATVALUE);
              return new Symbol(B3PW91Sym.Energ1);
          }
        case 35: break;
        case 12: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found the Step number for MP");
   yybegin(INTMP);
   return new Symbol(B3PW91Sym.NMP);
          }
        case 36: break;
        case 6: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found the RMS force");   
if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(B3PW91Sym.RGRAD1, new Float(yytext()));
          }
        case 37: break;
        case 11: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found the Step number");
   yybegin(INTVALUE);
   return new Symbol(B3PW91Sym.NSearch1);
          }
        case 38: break;
        case 5: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found the maximum force");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(B3PW91Sym.MGRAD1, new Float(yytext()));
          }
        case 39: break;
        case 1: 
          { 
          }
        case 40: break;
        case 15: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: Found RMS Force");
            yybegin(FLOATMP3);
            return new Symbol(B3PW91Sym.MPRms);
          }
        case 41: break;
        case 9: 
          { if (Settings.DEBUG) System.out.println("B3PW91Flex: MP2 Found the RMS force");   
if (Settings.DEBUG) System.out.println(yytext());
   yybegin(MPOPT);
   return new Symbol(B3PW91Sym.MPRGRAD, new Float(yytext()));
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(B3PW91Sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = B3PW91Sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java B3PW91Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        B3PW91Lexer scanner = null;
        try {
          scanner = new B3PW91Lexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
