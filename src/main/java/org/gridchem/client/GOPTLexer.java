/* The following code was generated by JFlex 1.4.1 on 10/27/06 4:47 AM */

package org.gridchem.client;
import java_cup.runtime.*;
import java.io.*;
import org.gridchem.client.common.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/27/06 4:47 AM from the specification file
 * <tt>gopt.flex</tt>
 */
public class GOPTLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ITER2 = 2;
  public static final int INTVALUE = 3;
  public static final int IGNOREALL = 2;
  public static final int ITER = 1;
  public static final int YYINITIAL = 0;
  public static final int FLOAT2 = 6;
  public static final int FLOAT1 = 5;
  public static final int FLOATVALUE = 4;
  public static final int ITER3 = 2;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    14,  0,  0,  0,  0,  0,  0,  0, 37,  7,  0, 41,  0,  2,  3,  0, 
     1, 45,  1,  1,  1, 46,  1,  1,  1, 44, 38,  0,  0,  6,  0,  0, 
     0, 30, 40, 29, 35, 26,  4, 34, 39, 28,  0,  0, 31, 25,  8, 36, 
    42,  0, 27, 23, 33, 24, 47, 43,  0, 32,  0,  0,  0,  0,  0, 51, 
     0, 48, 11, 50, 54, 12, 16,  0, 22, 20,  0,  0, 53, 10, 21, 15, 
    19,  0, 13, 17, 18,  9,  0,  0, 49,  0, 52,  0,  5,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\12\1\1\2\7\1\14\0\1\3\2\0\1\4"+
    "\2\0\1\5\70\0\1\6\27\0\1\7\21\0\1\10"+
    "\1\11\21\0\1\12\66\0\1\13\17\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u03de\0\u0415\0\u0415\0\u044c\0\u0483"+
    "\0\u0483\0\u04ba\0\u04f1\0\u04f1\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab"+
    "\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u0181\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u0181\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u0181\0\u0181"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u0181\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260"+
    "\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940"+
    "\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8"+
    "\0\u0181\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\10\1\11\66\10\1\12\16\10\1\13\1\10\1\14"+
    "\1\10\1\15\1\10\1\16\3\10\1\17\2\10\1\20"+
    "\1\21\111\10\1\22\1\23\2\10\1\23\43\10\1\23"+
    "\2\10\3\22\11\10\2\24\1\25\1\10\1\24\43\10"+
    "\1\24\2\10\3\24\11\10\2\26\1\27\1\10\1\26"+
    "\43\10\1\26\2\10\3\26\11\10\2\30\1\31\1\10"+
    "\1\30\43\10\1\30\2\10\3\30\10\10\100\0\1\32"+
    "\105\0\1\33\60\0\1\34\12\0\1\35\111\0\1\36"+
    "\37\0\1\37\72\0\1\40\100\0\1\41\42\0\1\42"+
    "\61\0\1\43\51\0\1\22\52\0\3\22\11\0\1\44"+
    "\1\0\1\45\50\0\3\44\11\0\1\46\52\0\3\46"+
    "\11\0\1\47\1\0\1\50\50\0\3\47\11\0\1\51"+
    "\52\0\3\51\11\0\1\52\1\0\1\53\50\0\3\52"+
    "\11\0\1\54\52\0\3\54\22\0\1\55\105\0\1\56"+
    "\51\0\1\57\56\0\1\60\143\0\1\61\34\0\1\62"+
    "\66\0\1\63\71\0\1\64\56\0\1\65\121\0\1\66"+
    "\24\0\1\67\105\0\1\70\57\0\1\71\61\0\1\72"+
    "\74\0\1\73\60\0\1\74\113\0\1\75\106\0\1\76"+
    "\27\0\1\77\51\0\1\100\73\0\1\101\105\0\1\102"+
    "\51\0\1\103\113\0\1\104\35\0\1\105\72\0\1\106"+
    "\115\0\1\107\53\0\1\110\46\0\1\111\72\0\1\112"+
    "\65\0\1\113\105\0\1\114\57\0\1\115\60\0\1\116"+
    "\60\0\1\117\73\0\1\120\111\0\1\121\35\0\1\122"+
    "\102\0\1\123\60\0\1\124\66\0\1\125\105\0\1\126"+
    "\42\0\1\127\102\0\1\130\53\0\1\131\72\0\1\132"+
    "\57\0\1\133\122\0\1\134\107\0\1\135\20\0\1\136"+
    "\67\0\1\137\105\0\1\140\42\0\1\141\70\0\1\142"+
    "\70\0\1\143\66\0\1\144\56\0\1\145\143\0\1\146"+
    "\63\0\1\147\24\0\1\150\70\0\1\151\105\0\1\152"+
    "\42\0\1\153\121\0\1\154\24\0\1\155\66\0\1\156"+
    "\126\0\1\157\44\0\1\160\62\0\1\161\66\0\1\162"+
    "\107\0\1\163\43\0\1\164\70\0\1\165\67\0\1\166"+
    "\66\0\1\167\53\0\1\170\106\0\1\171\74\0\1\172"+
    "\55\0\1\173\105\0\1\174\43\0\1\175\67\0\1\176"+
    "\65\0\1\177\66\0\1\200\134\0\1\201\22\0\1\202"+
    "\103\0\1\203\54\0\1\204\62\0\1\205\102\0\1\206"+
    "\116\0\1\207\66\0\1\210\10\0\1\211\107\0\1\212"+
    "\103\0\1\213\40\0\1\214\104\0\1\215\101\0\1\216"+
    "\35\0\1\217\66\0\1\220\106\0\1\221\50\0\1\222"+
    "\102\0\1\223\57\0\1\224\72\0\1\225\67\0\1\226"+
    "\2\0\1\227\1\0\1\230\70\0\1\231\111\0\1\232"+
    "\14\0\1\233\77\0\1\234\106\0\1\235\74\0\1\236"+
    "\1\237\65\0\1\236\1\240\51\0\1\241\65\0\1\242"+
    "\53\0\1\243\126\0\1\244\25\0\1\245\104\0\1\246"+
    "\36\0\1\247\64\0\1\250\46\0\1\251\17\0\1\252"+
    "\46\0\1\253\64\0\1\236\31\0\1\254\112\0\1\255"+
    "\54\0\1\256\73\0\1\257\44\0\1\260\116\0\1\261"+
    "\10\0\1\262\65\0\1\263\71\0\1\264\63\0\1\265"+
    "\42\0\1\266\102\0\1\267\54\0\1\270\77\0\1\271"+
    "\46\0\1\133\110\0\1\272\102\0\1\273\16\0\1\274"+
    "\135\0\1\275\17\0\1\276\147\0\1\277\31\0\1\300"+
    "\54\0\1\301\111\0\1\302\77\0\1\247\72\0\1\247"+
    "\12\0\1\303\140\0\1\304\14\0\1\305\100\0\1\306"+
    "\104\0\1\307\56\0\1\310\100\0\1\311\71\0\1\261"+
    "\10\0\1\262\1\0\1\264\71\0\1\247\50\0\1\261"+
    "\12\0\1\264\36\0\1\312\62\0\1\313\76\0\1\314"+
    "\50\0\1\315\72\0\1\316\70\0\1\145\74\0\1\317"+
    "\104\0\1\320\112\0\1\242\21\0\1\321\63\0\1\322"+
    "\66\0\1\323\112\0\1\324\41\0\1\325\104\0\1\326"+
    "\44\0\1\327\113\0\1\330\55\0\1\331\104\0\1\332"+
    "\57\0\1\333\64\0\1\334\44\0\1\335\117\0\1\336"+
    "\54\0\1\337\55\0\1\340\104\0\1\341\73\0\1\342"+
    "\57\0\1\343\67\0\1\344\71\0\1\345\71\0\1\346"+
    "\61\0\1\347\76\0\1\350\32\0\1\175\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\21\1\14\0\1\1\2\0\1\1\2\0"+
    "\1\1\70\0\1\11\27\0\1\11\21\0\2\11\21\0"+
    "\1\11\66\0\1\11\17\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static boolean DEBUG = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GOPTLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GOPTLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found the maximum force");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(GOPTSym.MGRAD, new Float(yytext()));
          }
        case 12: break;
        case 11: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found Number of steps");
	   yybegin(ITER);
	   return new Symbol(GOPTSym.FOUNDITER);
          }
        case 13: break;
        case 2: 
          { if  (Settings.DEBUG) System.out.println("GOPTFlex: Found iteration");
   if (Settings.DEBUG) System.out.println(yytext());
  yybegin (ITER);
   return new Symbol(GOPTSym.ITERATION, new Integer(yytext()));
          }
        case 14: break;
        case 8: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found Maximum Force");
            yybegin(FLOAT1);
            return new Symbol(GOPTSym.MaxGrad);
          }
        case 15: break;
        case 3: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found the energy");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(GOPTSym.ENERGY, new Float(yytext()));
          }
        case 16: break;
        case 10: 
          { yybegin(IGNOREALL);
      return new Symbol(GOPTSym.SCFDONE);
          }
        case 17: break;
        case 5: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found the RMS force");   
if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(GOPTSym.RGRAD, new Float(yytext()));
          }
        case 18: break;
        case 7: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found the Step number");
   yybegin(INTVALUE);
   return new Symbol(GOPTSym.NSearch);
          }
        case 19: break;
        case 6: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found the energy");
               yybegin(FLOATVALUE);
              return new Symbol(GOPTSym.Energ);
          }
        case 20: break;
        case 9: 
          { if (Settings.DEBUG) System.out.println("GOPTFlex: Found RMS Force");
            yybegin(FLOAT2);
            return new Symbol(GOPTSym.RmsGrad);
          }
        case 21: break;
        case 1: 
          { 
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(GOPTSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = GOPTSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java GOPTLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        GOPTLexer scanner = null;
        try {
          scanner = new GOPTLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
