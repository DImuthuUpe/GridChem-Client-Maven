package org.gridchem.client;
import java.util.*;
import java.io.*;

import org.gridchem.client.common.Settings;
import org.gridchem.client.util.*;

// Program to describe the connectivity
// this is very rudimentary. 
// Dodi Heryadi 11/13/2002
 
public class Connect1
{
   public Connect1(String temporary) 
   {

//First create table for covalent radii, based on the atomic number
//units in Amstrong...added radius of all elements after atomic number 19...Kailash Kotwani
	double rad[] = new double[107];
    rad[0] = 0.000;
    rad[1] = 0.230;
    rad[2] = 0.700;
	rad[3] = 0.680;
	rad[4] = 0.350;
	rad[5] = 0.830;
	rad[6] = 0.680;
	rad[7] = 0.680;
	rad[8] = 0.680;
	rad[9] = 0.640;
	rad[10] = 0.700;
	rad[11] = 0.970;
	rad[12] = 1.100;
	rad[13] = 1.350;
	rad[14] = 1.200;
	rad[15] = 0.750;
	rad[16] = 1.020;
	rad[17] = 0.990;
	rad[18] = 0.700;
	rad[19] = 1.330;
	rad[20] = 0.99;
	rad[21] = 1.44;
	rad[22] = 1.47;
    rad[23] = 1.33;
    rad[24] = 1.35;
    rad[25] = 1.35;
    rad[26] = 1.34;
    rad[27] = 1.33;
    rad[28] = 1.50;	
    rad[29] = 1.52;
    rad[30] = 1.45;
    rad[31] = 1.22;
    rad[32] = 1.17;
    rad[33] = 1.21;
    rad[34] = 1.22;
    rad[35] = 1.21;
    rad[37] = 1.47;	
    rad[38] = 1.12;
    rad[39] = 1.78;
    rad[40] = 1.56;
    rad[41] = 1.48;
    rad[42] = 1.47;
    rad[43] = 1.35;
    rad[44] = 1.40;
    rad[45] = 1.45;
    rad[46] = 1.50;		
    rad[47] = 1.59;
    rad[48] = 1.69;
    rad[49] = 1.63;
    rad[50] = 1.46;
    rad[51] = 1.46;
    rad[52] = 1.47;	
    rad[53] = 1.40;
    rad[55] = 1.67;
    rad[56] = 1.34;
    rad[57] = 1.87;
    rad[58] = 1.83;
    rad[59] = 1.82;
    rad[60] = 1.81;
    rad[61] = 1.8;
    rad[62] = 1.8;		
    rad[63] = 1.99;
    rad[64] = 1.79;
    rad[65] = 1.76;
    rad[66] = 1.75;
    rad[67] = 1.74;	
    rad[68] = 1.73;
    rad[69] = 1.72;
    rad[70] = 1.94;
    rad[71] = 1.72;
    rad[72] = 1.57;
    rad[73] = 1.43;
    rad[74] = 1.37;
    rad[75] = 1.35;
    rad[76] = 1.37;		
    rad[77] = 1.32;
    rad[78] = 1.5;
    rad[79] = 1.5;
    rad[80] = 1.70;
    rad[81] = 1.55;
    rad[82] = 1.54;
    rad[83] = 1.54;
    rad[84] = 1.68;
    rad[87] = 1.8;
    rad[88] = 1.9;
    rad[89] = 1.88;
    rad[90] = 1.79;
    rad[91] = 1.61;
    rad[92] = 1.58;
    rad[93] = 1.55;
    rad[94] = 1.53;
    rad[95] = 1.51;
    
    
    	// open the input file generated by FinalCoordParser or GFinalCoordParser
     FileInput in = new FileInput(temporary) ;
//
        double x[] = new double[20];  
        double y[] = new double[20];
        double z[] = new double[20];
        int ctr[] = new int[20];
        int atom[] = new int[20];
        int k = -1;
        char c = in.readCharacter();
        while ( !in.eof())
     {
       k++;
       int l = in.readInteger() ;
//      System.out.println("center was: " + l) ;
       ctr[k] = l;
       int l1 = in.readInteger() ;
//      System.out.println("atom number was: " + l1) ;
       atom[k] = l1;

       double d = in.readDouble() ;
       x[k] = d;
//      System.out.println("x was: " + x[k]) ;
       double f = in.readDouble() ;
       y[k] = f;
//      System.out.println("y was: " + y[k]) ;
       double f1 = in.readDouble() ;
       z[k] = f1;
//      System.out.println("z was: " + z[k]) ;
//      System.out.println("index: " +k);
      }
     in.close() ;
//     System.out.println("final index: " +k);
      
/*     for (int i1 = 0; i1 < k; i1++)
     { System.out.println("CENTER: " +ctr[i1]);
       System.out.println("  atom: " +atom[i1]);
       System.out.println("     x: " +x[i1]);
       System.out.println("     y: " +y[i1]);
       System.out.println("     z: " +z[i1]);
     }
*/
// now find the distance among the atoms: Rij
       double dist[][] = new double[20][20];

       for (int i2 = 0; i2 < k; i2++)
         {
          for (int j2 = 0; j2 < k; j2++)
            {
              if (i2 != j2)
                 {
                     double xdiff = (x[i2] - x[j2])*(x[i2] - x[j2]);
                     double ydiff = (y[i2] - y[j2])*(y[i2] - y[j2]); 
                     double zdiff = (z[i2] - z[j2])*(z[i2] - z[j2]);  
                     double xyz = xdiff + ydiff + zdiff;
                     dist[i2][j2] = Math.sqrt(xyz);
                    System.out.println("i2       : " +i2);
                     System.out.println("   j2    : " +j2);
                     System.out.println("     dist: " +dist[i2][j2]); 
                 }
             }
           }

//create a file to store the connectivity information
     try 
     {
       //ParseGSCF2 temp = new ParseGSCF2(Settings.defaultDirStr + 
       ParseGSCF2 temp = new ParseGSCF2(Env.getApplicationDataDir() +
	       		Settings.fileSeparator + "connect");
// now start the connection
/*     System.out.println(" ");
      System.out.println(" "); */
       for (int i2 = 0; i2 < k; i2++)
         {
           System.out.println("CONECT   " +ctr[i2]);
           if (ctr[i2] > 9 && ctr[i2] < 100)
           { temp.putField("CONECT   ");
           temp.putField(ctr[i2]);
           }
           else if (ctr[i2] > 99 && ctr[i2] < 1000)
           { temp.putField("CONECT  ");
           temp.putField(ctr[i2]);
           }
           else{
        	   temp.putField("CONECT    ");
               temp.putField(ctr[i2]);
           } 
           
           
          
          for (int j2 = 0; j2 < k; j2++)
            {
//             System.out.println("   ");
              if (i2 != j2)
                 {
                   double test = rad[atom[i2]] + rad[atom[j2]] + 0.250 ;
                   //double test1 = Math.sqrt(test);
                   if (dist[i2][j2] < test ) {
                     System.out.println("                 " +ctr[j2]);
                     if (ctr[j2] > 9 && ctr[j2] < 100)
                     { temp.putField("   ");
                     temp.putField(ctr[j2]);
                     }
                     else if (ctr[j2] > 99 && ctr[j2] < 1000)
                     { temp.putField("  ");
                     temp.putField(ctr[j2]);
                     }
                     else{
                    	 temp.putField("    ");
                         temp.putField(ctr[j2]);
                     }  
                      }
                 }
             }
             temp.putField("\n");
           }
      }
      catch (IOException ie) {System.out.println("Error in Connectivity");}
   }
}

